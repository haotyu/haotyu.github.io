{"meta":{"title":"浩宇的博客","subtitle":"","description":"","author":"浩宇","url":"https://hao-yu.top","root":"/"},"pages":[{"title":"friends","date":"2022-07-29T05:21:15.000Z","updated":"2022-07-29T05:21:31.159Z","comments":true,"path":"friends/index.html","permalink":"https://hao-yu.top/friends/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-07-29T05:20:14.000Z","updated":"2022-07-29T05:20:39.719Z","comments":true,"path":"contact/index.html","permalink":"https://hao-yu.top/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-07-26T13:43:56.000Z","updated":"2022-07-29T05:17:32.818Z","comments":true,"path":"categories/index.html","permalink":"https://hao-yu.top/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2022-07-26T13:43:32.000Z","updated":"2022-07-29T05:19:27.579Z","comments":true,"path":"about/index.html","permalink":"https://hao-yu.top/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-07-26T13:43:17.000Z","updated":"2022-07-29T05:18:22.768Z","comments":true,"path":"tags/index.html","permalink":"https://hao-yu.top/tags/index.html","excerpt":"","text":""},{"title":"playlist","date":"2022-06-27T14:57:47.000Z","updated":"2022-06-27T15:05:15.698Z","comments":true,"path":"playlist/index.html","permalink":"https://hao-yu.top/playlist/index.html","excerpt":"","text":"menu: - { key: “音乐”, link: “/playlist/“, icon: “iconfont icon-music” }"}],"posts":[{"title":"MYSQL数据库基础(十)SQL编程基础","slug":"MYSQL数据库基础-十-SQL编程基础","date":"2022-06-30T16:12:09.000Z","updated":"2022-07-27T05:03:04.275Z","comments":true,"path":"2022/07/01/mysql-shu-ju-ku-ji-chu-shi-sql-bian-cheng-ji-chu/","link":"","permalink":"https://hao-yu.top/2022/07/01/mysql-shu-ju-ku-ji-chu-shi-sql-bian-cheng-ji-chu/","excerpt":"","text":"说明：其实不用缩进的,我这是为了好看。 一、变量1、系统变量 @@变量名 查看当前系统版本和时间 select @@variables as \"当前版本为\",current_date(); 2、用户变量 @变量名 定义一个用户变量 num 赋值为 100 set @num = 100; -- 方法一 set @num := 100; -- 方法二 select @num := 100; -- 方法三 select 100 into @num; -- 方法四 select a into @num from table_name where id = 1; -- 方法五 字段 id = 1的 a 字段的值为 100 select @num; -- 查看变量值 3、常量 即：不会变量 4、局部变量 在 begin .. end 之间定义的变量 二、存储过程 proceduredeclare ：用于声明变量 default ：用于设置默认值 call ：用于使用存储过程 1、创建存储过程不传参数 create procedure proc_1() -- 创建一个名为proc_1存储过程 begin -- 开始 类似java 的{ declare a int default 1; -- 声明一个局部变量 a 默认值为 1 select * from test where id = a; -- 查询表test 字段id = 1 的信息 end; -- 结束 类似java 的 } call proc_1; -- 使用存储过程 带传入参数 in create procedure proc_2(in a int) -- in a int 声明一个输入整型参数 a begin select * from test where id = a; end; call proc_2(1); -- 使用存储过程输入参数 1 带传入 in 参数和 带出 参数 out 输出的参数用来带出处理后得到的数据，并且输出参数要为用户变量即：@变量名 create procedure proc_3(in a int,out b varchar(10)) -- out 接收输出参数的变量 b begin select sname into b from test where id = a; -- 将 name 值 赋给 b end; call proc_3(1,@name); -- 声明用户变量 @name 用来接收输出值 select @name; -- 查看变量值 传入参数 inout 用于从外部传入变量到存储过程后，经过修改后返回修改后的值赋给传入的变量 create procedure proc(inout a int) begin set a = 100; -- 给a 赋值为 100 end; call proc_4(@b); select @b; 2、查看存储过程查看 proc_1 的定义 show create procedure proc_1; 显示所有存储过程 show procedure status; 3、删除存储过程drop procedure proc_3; 三、函数 function1、创建函数function ：函数关键字 returns : 用于声名函数返回值的类型，这行不用分号结束 不带出传入参数 -- 查询 id = 1 的学生姓名 create function func_1() returns varchar(10) -- 声明返回值的类型为 变长字符串型并且长度为 10 begin declare a varchar(10) default \"\"; -- 声明一个变长字符串型的 a 局部变量 select sname into a from test where id = 1; return a; -- 返回 a 的值 end; select func_1(); -- 使用自定义函数 带传入参数 ：传参 -- 两数相加 create function func_2(a int,b int) -- 传入两个整型参数 a,b returns int begin declare c int; set c = a + b; -- 两数相加并赋值给 c return c; end; select func_2(1,2) -- 填入参数 1,2 2、查看所有函数show function status; 3、删除函数drop function func_3; -- func_3 为函数名 四、触发器 trigger触发器（trigger）是SQL server 提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程，它的执行不是由程序调用，也不是手工启动，而是由事件来触发，比如当对一个表进行操作（ insert，delete， update）时就会激活它执行。触发器经常用于加强数据的完整性约束和业务规则等。 触发器可以从 DBA_TRIGGERS ，USER_TRIGGERS 数据字典中查到。SQL3的触发器是一个能由系统自动执行对数据库修改的语句。 触发器可以查询其他表，而且可以包含复杂的SQL语句。它们主要用于强制服从复杂的业务规则或要求。例如：您可以根据客户当前的帐户状态，控制是否允许插入新订单。 触发器也可用于强制引用完整性，以便在多个表中添加、更新或删除行时，保留在这些表之间所定义的关系。然而，强制引用完整性的最好方法是在相关表中定义主键和外键约束。如果使用数据库关系图，则可以在表之间创建关系以自动创建外键约束。 触发器与存储过程的唯一区别是触发器不能执行EXECUTE语句调用，而是在用户执行Transact-SQL语句时自动触发执行。 此外触发器是逻辑电路的基本单元电路，具有记忆功能，可用于二进制数据储存，记忆信息等。 语法 create trigger 触发器名称 [触发时机(before|after)] [触发动作(update|insert|delete)] on [数据表名] for each row begin [触发后执行的事件] end; 1、设置插入时触发器为 test 表 设置插入时的触发器，当test 表每次新插入一条记录时统计一下记录的总数并赋值给 @count_1 create trigger trig_1 after insert on test for each row begin select count(*) into @count_1 from test; end; insert into test values(\"小刚\",\"男\",2); -- 插入一条记录，用于触发触发器 select @count_1; -- 查看用户变量 @count_1 的值 2、设置删除时触发器为 test 表 设置删除时的触发器，当test 表每次删除一条记录时统计一下记录的总数并赋值给 @count_2 create trigger trig_2 after delete on test for each row begin select count(*) into @count_2 from test; end; delete from test where id = 2; -- 删除一条记录，用于触发触发器 select @count_2; -- 查看用户变量 @count_2 的值 3、设置修改时触发器 为 test 表 设置删除时的触发器，当test 表每次修改一条记录时统计一下记录的总数并赋值给 @count_3 create trigger trig_3 after update on test for each row begin select count(*) into @count_3 from test; end; update test set sname = \"小刚\" where id = 1; -- 更新一条记录，用于触发触发器 select @count_3; -- 查看用户变量 @count_3 的值 4、查看指定触发器 show create trigger trig_1; -- trig_1 为触发器名称 5、查看所有的触发器 show triggers; 6、删除触发器 drop trigger trig_3; 五、流程控制流程控制可以用于，函数、存储过程、触发器等，这里我都用函数来举例。 1、if 判断语句语法 if 表达式 then 执行体; elseif 表达式 then 执行体; else 执行体; end if; 创建一个函数max_min ，可以接收两个参数并返回两数之间的大小关系 create function max_min(a int,b int) returns varchar(30) begin if a &gt; b then -- 需要 then 然后开始要执行的语句 return concat(a,\"大于\",b); elseif a = b then return concat(a,\"等于\",b); else -- 这个不需要then return concat(a,\"小于\",b); end if; -- 结束if 语句 end; select max_min(1,2),max_min(2,2),max_min(3,2); -- 验证一下 2、case 语句语法 case 表达式 /*方法一*/ case /* 方法二*/ when 值 then when 表达式 then 执行体; 执行体; when 值 then when 表达式 then 执行体; 执行体; else else 执行体; 执行体; end case; end case; 创建一个函数max_min_case ，可以接收两个参数并返回两数之间的大小关系 -- 这里用了方法二 create function max_min_case(a int,b int) returns varchar(30) begin case when a &gt; b then return concat(a,\"大于\",b); when a = b then return concat(a,\"等于\",b); else return concat(a,\"小于\",b); end case; end; select max_min_case(1,2),max_min_case(2,2),max_min_case(3,2); -- 验证一下 3、while 循化语句语法 while 表达式 do 执行体; end while; 创建一个函数 func_while ，实现 1+3+5+…+99 create function func_while() returns int begin declare num int default 1; declare n int default 3; while n &lt; 100 do set num = num + n; -- 要用 set 来创建每一次的赋值 set n = n + 2; end while; return num; -- 返回num 值 end; select func_while(); -- 使用一下 4、repeat 循环语句repeat 循化 类似于 java 里的 do{ }while() ,就是先执行一个，再去判断 until 条件，当 until 条件为真时结束循化，条件为假时，继续循环。 语法 repeat 执行体; until 条件; end repeat; 创建一个函数 func_repeat ，实现 2+4+6+…100 create function func_repeat() returns int begin declare num int default 2; declare n int default 4; repeat set num = num + n; set n = n + 2; until n &gt; 100 -- 这里不用 ; end repeat; return num; end; select func_repeat() -- 使用验证一下 5、loop 循环语句扩展知识 leave ：类似与 python 的 break,即：结束循环 iterate : 类似 python 的 continue 即：结束continue 后的循环体后继续重新循环 loop 没有内置循环条件，即：没有结束循环的条件，但可以用 leave 来结束循环。 语法 startloop:loop -- startloop 是自定义的一个词，用来做标志的 循环体; if 表达式 then levae startloop; -- 自定义的结束循环 end if; end loop; 创建一个函数 func_loop ，实现 1+3+5+…+99 create function func_loop() returns int begin declare num int default 1; declare n int default 3; startloop:loop set num = num + n; set n = n + 2; if n &gt; 100 then leave startloop; end if; end loop; return num; end; select func_loop(); -- 使用验证一下","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"编程","slug":"编程","permalink":"https://hao-yu.top/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"MYSQL数据库基础(九)数据库索引","slug":"MYSQL数据库基础-九-数据库索引","date":"2022-06-30T16:11:25.000Z","updated":"2022-07-27T04:54:12.397Z","comments":true,"path":"2022/07/01/mysql-shu-ju-ku-ji-chu-jiu-shu-ju-ku-suo-yin/","link":"","permalink":"https://hao-yu.top/2022/07/01/mysql-shu-ju-ku-ji-chu-jiu-shu-ju-ku-suo-yin/","excerpt":"","text":"一、创建索引方法一： 在创建表时创建索引 create table abc( id int, sex char(10), name varchar(100), unique index index_id(id) #创建唯一值索引:id 索引名:为index_id ); 方法二： 用create 创建索引 create unique index index_sex on abc(sex); #创建唯一值索引:sex 索引名:为index_sex 方法三： 在表创建完之后添加索引 alter table abc add unique index index_name(name); # add 添加唯一值索引:name 索引名:为index_name 二、删除索引删除 名为 ：index_name 的索引 drop index index_name on abc;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"索引","slug":"索引","permalink":"https://hao-yu.top/tags/%E7%B4%A2%E5%BC%95/"}]},{"title":"python基础之字符串操作","slug":"python基础之字符串操作","date":"2022-06-28T12:44:34.000Z","updated":"2022-07-30T01:50:36.721Z","comments":true,"path":"2022/06/28/python-ji-chu-zhi-zi-fu-chuan-cao-zuo/","link":"","permalink":"https://hao-yu.top/2022/06/28/python-ji-chu-zhi-zi-fu-chuan-cao-zuo/","excerpt":"","text":"一、统一英文大小写1、统一英文大写 upper() a = \"ABcDefg\" print(a.upper()) &gt;&gt;&gt; ABCDEFG 2、统一英文小写 lower() a = \"ABcDefg\" print(a.lower()) &gt;&gt;&gt; abcdefg 二、去除字符串首尾空格1、去除字符串开头空格 lstrip() a = \" hello world! \" print(a.lstrip()) &gt;&gt;&gt; hello world! 2、去除字符串末尾空格 rstrip() a = \" hello world! \" print(a.rstrip()) &gt;&gt;&gt; hello world! 3、去除字符串首位空格 strip() a = \" hello world! \" print(a.strip()) &gt;&gt;&gt; hello world! 三、拆分字符串 split()把字符串 a 以 , 分割返回列表 a = \"hello,world,!\" print(a.split(\",\")) &gt;&gt;&gt; [‘hello’, ‘world’, ‘!’] 四、查找子串的位置 find()说明：find() 函数如果字符串中有所查的子串 返回子串位置 ，否则返回 -1 1、查找 “world” 在字符串 a 中的位置 a = \"hello world!\" print(a.find(\"world\")) &gt;&gt;&gt; 6 2、查找 “xiaoming” 在字符串 a 中的位置 a = \"hello world!\" print(a.find(\"xiaoming\")) &gt;&gt;&gt; -1 五、截取字符串 [:::]说明： string[起始索引:结尾索引:步涨] 1、截取字符串 的 前3 位字符 a = \"0123456789\" print(a[0:3]) &gt;&gt;&gt; 012 2、截取字符串 的 后3 位字符 a = \"0123456789\" print(a[-3::]) # : 截取全部字符 &gt;&gt;&gt; 789 3、截取字符串中位置 为 奇数 的字符 a = \"0123456789\" print(a[1::2]) # : 截取全部字符 &gt;&gt;&gt; 13579 4、截取字符串中位置 为 偶数 的字符 a = \"0123456789\" print(a[::2]) #不设置初始值 默认为0 &gt;&gt;&gt; 02468 5、将字符串倒序截取输出 a = \"0123456789\" print(a[::-1]) #截取全部字符串 步涨值为-1 &gt;&gt;&gt; 9876543210 六、字符串替换 replace()说明：replace(要替换的字符串,替换后的字符串) 把 a 字符串 中的 “HELLO” 替换为 “hello” a = \"HELLO world!\" print(a.replace(\"HELLO\",\"hello\")) &gt;&gt;&gt; hello world! 七、获取字符串的长度 len()返回 a 字符串的长度 a = \"hello world!\" print(len(a)) &gt;&gt;&gt; 12 八、使字符串居中显示 center()说明：center(width,filechar) width 字符串排版总宽 filechar 为填充字符 1、将 “12321” 在 7个字符宽度里居中显示 a = \"12321\" print(a.center(7)) &gt;&gt;&gt; 12321 2、将 “12321” 在 7个字符宽度里居中显示,并用 * 填充 a = \"12321\" print(a.center(7,\"*\")) &gt;&gt;&gt; *12321* 九、统计子字符串出现次数 count()说明：count(sub,start=0,end(string)) sub：搜索的子字符串 start：字符串搜索开始位置，默认为第一个位置 end：字符串搜索结束位置，默认为最后一个位置 1、统计字符串中 “ab” 出现的次数 a = \"abababcdababab\" print(a.count(\"ab\")) &gt;&gt;&gt; 6 2、统计字符串从位置为 3~9 之间中 “ab” 出现的次数 a = \"abababcdababab\" print(a.count(\"ab\",3,9)) &gt;&gt;&gt; 1 十、新字符串生成 join()1、将一个字符串 在每个字符中间加入 - 返回一个新字符串 a = \"abcdefg\" print(\"-\".join(a)) &gt;&gt;&gt; a-b-c-d-e-f-g 2、将一个列表中的每个字符连接在一起输出 a = [\"a\",\"b\",\"c\"] print(\"\".join(a)) &gt;&gt;&gt; abc","categories":[{"name":"python","slug":"python","permalink":"https://hao-yu.top/categories/python/"}],"tags":[{"name":"字符串操作","slug":"字符串操作","permalink":"https://hao-yu.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"}]},{"title":"python基础之编码与进制","slug":"python基础之编码与进制","date":"2022-06-28T12:42:03.000Z","updated":"2022-07-27T05:02:09.268Z","comments":true,"path":"2022/06/28/python-ji-chu-zhi-bian-ma-yu-jin-zhi/","link":"","permalink":"https://hao-yu.top/2022/06/28/python-ji-chu-zhi-bian-ma-yu-jin-zhi/","excerpt":"","text":"一、Ascii 码转换 ord()将字符 a 转换为 Ascii码 a = \"a\" print(ord(a)) &gt;&gt;&gt; 97 二、Ascii 码转换为普通字符 chr()将 ascii 码 97 转换为普通字符 a = 97 print(chr(a)) &gt;&gt;&gt; a 三、进制转换1、二 进制转换为其他进制2 进制转 8 进制 oct(int(n,2)) n = \"1010\" print(oct(int(n,2))) &gt;&gt;&gt; 0o12 2 进制转 10 进制 int(n,2) n = \"1010\" print(int(n,2)) &gt;&gt;&gt; 10 2 进制转 16 进制 hex(int(n,2)) n = \"1010\" print(hex(int(n,2))) &gt;&gt;&gt; 0xa 2、八进制转换为其他进制8 进制转 2 进制 bin(int(n,8)) n = \"1010\" print(bin(int(n,8))) &gt;&gt;&gt; 0b1000001000 8 进制转 10 进制 int(n,8) n = \"1010\" print(int(n,8)) &gt;&gt;&gt; 520 8 进制转 16 进制 hex(int(n,8)) n = \"1010\" print(hex(int(n,8))) &gt;&gt;&gt; 0x208 3、十进制转换为其他进制10 进制转 2 进制 bin(int(n,10)) n = \"1010\" print(bin(int(n,10))) &gt;&gt;&gt; 0b1111110010 10 进制转 8进制 oct(int(n,10)) n = \"1010\" print(oct(int(n,10))) &gt;&gt;&gt; 0o1762 10 进制转 16 进制 hex(int(n,10)) n = \"1010\" print(hex(int(n,10))) &gt;&gt;&gt; 0x3f2 4、十六进制转换为其他进制16 进制转 2 进制 bin(int(n,16)) n = \"1010\" print(bin(int(n,16))) &gt;&gt;&gt; 0b1000000010000 16 进制转 8 进制 oct(int(n,16)) n = \"1010\" print(oct(int(n,16))) &gt;&gt;&gt; 0o10020 16 进制转 10 进制 int(n,16) n = \"1010\" print(int(n,16)) &gt;&gt;&gt; 4112","categories":[{"name":"python","slug":"python","permalink":"https://hao-yu.top/categories/python/"}],"tags":[{"name":"进制转换","slug":"进制转换","permalink":"https://hao-yu.top/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"}]},{"title":"python基础之常用数据结构","slug":"python基础之常用数据结构","date":"2022-06-28T12:40:03.000Z","updated":"2022-07-27T05:01:56.148Z","comments":true,"path":"2022/06/28/python-ji-chu-zhi-chang-yong-shu-ju-jie-gou/","link":"","permalink":"https://hao-yu.top/2022/06/28/python-ji-chu-zhi-chang-yong-shu-ju-jie-gou/","excerpt":"","text":"一、列表list（有序）增、删、改、查1、在列表增加元素 append()​ 创建一个空列表，增加元素 name 、age a = [] a.append(\"name\") a.append(\"age\") print(a) &gt;&gt;&gt; [‘name’, ‘age’] ​ 在 a 列表中指定位置 1 插入 sex insert() a = ['name', 'age'] a.insert(1,\"sex\") print(a) &gt;&gt;&gt; [‘name’, ‘sex’, ‘age’] 2、删除 元素pop()1、列表 a 第一个元素和最后一个元素 a = [\"name\",\"age\",\"sex\"] a.pop(0) a.pop() print(a) &gt;&gt;&gt; [‘age’] 2、删除列表中索引为 1 的元素 del list[index] a = [\"name\",\"age\",\"sex\"] del a[1] print(a) &gt;&gt;&gt; [‘name’, ‘sex’] 3、修改元素1、把列表 a 中 第一个位置元素改为 “sno” a = [\"name\",\"age\",\"sex\"] a[1] = \"sno\" print(a) &gt;&gt;&gt; [‘name’, ‘sno’, ‘sex’] 4、查询 a 列表的元素 list[index]a = [\"name\",\"age\",\"sex\"] print(a[0]) &gt;&gt;&gt; name ​ 遍历列表 a 所有元素 for in a = [\"name\",\"age\",\"sex\"] for i in a: print(i,end=\" \") &gt;&gt;&gt; name age sex 二、元组 tuple (有序 ) 查、解包元组元素不可改变 1、创建元组创建一个元组，并写入 name、age、sex a = (\"name\",\"age\",sex) 2、查询元组1、查询元组 a 和只查询 第一个元素 a = (\"name\",\"age\",\"sex\") print(a) print(a[0]) &gt;&gt;&gt; (‘name’, ‘age’, ‘sex’)&gt;&gt;&gt; name 2、遍历所有元素 a = (\"name\",\"age\",\"sex\") for i in a: print(i,end=\" \") &gt;&gt;&gt; name age sex 3、元组解包把元组 a 解包 a = (\"name\",\"age\",\"sex\") b,c,d = a print(b,c,d) &gt;&gt;&gt; name age sex a = (\"name\",\"age\",\"sex\") b,*c = a print(b,c) &gt;&gt;&gt; name [‘age’, ‘sex’] 三、字典 dict (无序) 增、删、改、查键不重复，唯一 创建一个空字典 a = {} 1、创建字典1、创建在字典 a 中增加 元素 “name”:”xiaoming” “age”:18 (1) a = {} a[\"name\"] = \"xiaoming\" a[\"age\"] = 18 print(a) (2) a = dict(name=\"xiaoming\",age=18) print(a) &gt;&gt;&gt; {‘name’: ‘xiaoming’, ‘age’: 18} 2、删除字典 pop(key,d)删除字典 a 中的元素 “age”:18 说明：pop(key,d) key：删除的 键 d：没有对应的键返回 d a = { \"name\":\"xiaoming\", \"age\" :18 } a.pop(\"age\",\"d\") print(a) &gt;&gt;&gt; {‘name’: ‘xiaoming’} 删除字典 a 所有元素 clear() a = { \"name\":\"xiaoming\", \"age\" :18 } a.clear() print(a) &gt;&gt;&gt; {} 3、修改字典元素把字典 a 的 “name” 键 的值 修改为 “小明” a = { \"name\":\"xiaoming\", \"age\" :18 } a[\"name\"] = \"小明\" print(a) &gt;&gt;&gt; {‘name’: ‘小明’, ‘age’: 18} 4、查询字典说明：get(key,”d”) 若字典d 中没有key键 则返回 “d” 1、获取字段 a 的 “name” 键的值 get() a = { \"name\":\"xiaoming\", \"age\" :18 } b = a.get(\"name\",\"d\") print(b) a = { \"name\":\"xiaoming\", \"age\" :18 } b = a[\"name\"] print(b) &gt;&gt;&gt; xiaoming 2、遍历字典 a 所有的键 keys() a = { \"name\":\"xiaoming\", \"age\" :18 } for i in a.keys(): print(i,end=\" \") &gt;&gt;&gt; name age 3、遍历字典 a 所有的值 values() a = { \"name\":\"xiaoming\", \"age\" :18 } for i in a.values(): print(i,end=\" \") &gt;&gt;&gt; xiaoming 18 4、返回字典 a 中 的所有键对值 items() 可迭代 a = { \"name\":\"xiaoming\", \"age\" :18 } b = a.items() print(b) &gt;&gt;&gt; dict_items([(‘name’, ‘xiaoming’), (‘age’, 18)]) 5、遍历所有键对值 a = { \"name\":\"xiaoming\", \"age\" :18 } for i,j in a.items(): print(i,\":\",j,end=\" \") &gt;&gt;&gt; name : xiaoming age : 18","categories":[{"name":"python","slug":"python","permalink":"https://hao-yu.top/categories/python/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://hao-yu.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"MYSQL数据库基础(八) 数据库视图","slug":"MYSQL数据库基础-八-数据库视图","date":"2022-05-26T06:55:36.000Z","updated":"2022-07-27T05:50:23.488Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-ba-shu-ju-ku-shi-tu/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-ba-shu-ju-ku-shi-tu/","excerpt":"","text":"一、视图介绍理解：视图就像一个窗口，每个人在自己家里的窗口往外看，看到的风景是不一样的 视图就是给表开一个窗口，让每个人(角色)看到的风景不一样(数据) 窗口 (视图) 原本是没有风景(数据)的，它只是建立在风景(数据表)之上 二、创建视图(view)1、单表创建视图要求：给student表,建立视图(stud)，并且视图只有student表的sno、sname、ssex列， create view stud as select sno,sname,ssex from student; 2、多表创建视图要求：给student 、sc 两表创建视图(stu_sc) ,并且视图只能有student表的 sno、sname列，sc 表的 cno,degree 列 , 并为每个列取名 sno (学号) sname(姓名) cno(课程号) degree(成绩) create view stu_sc(学号,姓名,课程号,成绩) as select sc.sno,sname,cno,degree from student,sc; 3、as 后的查询语句可以像查询表一样操作三、更改视图(alter)要求：把视图 (stud) 减少sno 列 alter view stud as select sname,ssex from student; 四、查看视图详细信息full 查看所有表的类型，视图和表 show full tables; desc 查看视图结构 desc stud; 五、更新视图内容1、插入数据(insert into)要求：向stud 视图插入 一条数据 (“小明”,”男”) insert into stud values (\"小明\",\"男\"); 2、更改数据(update)要求：把stud 表 sname 列 的小明 改为 小刚 update stud set sname = \"小刚\" where sname = \"小明\"; 3、删除数据(delete from)要求：向stud 视图删除 一条数据 条件为 sname = “小刚” delete from stud where sname = \"小刚\"; 六、总结1、视图是逻辑上存在的，而数据表是真实存在的，视图是一个编译好了的SQL语句。 2、在更新视图内容时，实际上是对原表的操作，即： 修改原表，视图也会相应的发生该表，反之也是。 3、视图只能查看原表的部分内容 4、当视图是原表使用聚合函数时，不能修改 5、待补","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"视图","slug":"视图","permalink":"https://hao-yu.top/tags/%E8%A7%86%E5%9B%BE/"},{"name":"view","slug":"view","permalink":"https://hao-yu.top/tags/view/"}]},{"title":"MYSQL数据库基础(七) 聚集函数查询","slug":"MYSQL数据库基础-七-数据表的查询四-聚集函数查询","date":"2022-05-26T06:53:35.000Z","updated":"2022-07-27T05:03:28.223Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-qi-shu-ju-biao-de-cha-xun-si-ju-ji-han-shu-cha-xun/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-qi-shu-ju-biao-de-cha-xun-si-ju-ji-han-shu-cha-xun/","excerpt":"","text":"一、按某列 升 降 排序(order by)1、按升序排序(asc)说明：系统默认按升序排序 表：sc 字段： * (所有) degree(成绩) 要求：查询sc 并 让 degree 按升序输出 select * from sc order by degree asc; select * from sc order by degree; 两个或多个字段 用逗号隔开 select * from sc order by degree asc,sno asc; 2、按降序排序(desc)表：sc 字段： * (所有) degree(成绩) 要求：查询sc 并 让 degree 按降序输出 select * from sc order by degree desc; 二、按组合输出(group by [having])1、简单分组表：student 字段：classno 函数：count() 统计列 要求：统计输出各班学生的人数 select classno,count(*) from student group by classno; 2、分组加条件(having)表：sc 字段：sno 函数：count() 统计列 要求：查询选修了2门以上课程的学生学号和选修门数。 select sno,count(*) from sc group by sno having count(*) &gt;2;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"聚集函数查询","slug":"聚集函数查询","permalink":"https://hao-yu.top/tags/%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/"}]},{"title":"MYSQL数据库基础(六) 嵌套查询","slug":"MYSQL数据库基础-六-数据表的查询三-嵌套查询","date":"2022-05-26T06:51:45.000Z","updated":"2022-07-27T05:03:38.748Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-liu-shu-ju-biao-de-cha-xun-san-qian-tao-cha-xun/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-liu-shu-ju-biao-de-cha-xun-san-qian-tao-cha-xun/","excerpt":"","text":"一、嵌套查询(in)表：student 、sc 字段：cno 、degree sname 作用：从student表查询到的结果当sc 表的查询条件的一部分 要求：查询 “小明” 同学所选的 cno 和degree 。 select cno,degree from sc where sno in (select sno from student where sname = \"小明\"); 二、嵌套查询(exists)exists 只会返回true 和 false 表：student 字段：sno,sname,sbirthday 作用：把外层查询到的结果，放入内层去对比 结果成立 返回 true 反之 返回false 要求：(1) 查询姓李的同学和年龄超过30岁的学号、姓名、年龄。 select sno,sname,year(current_date)-year(sbirthday) from student a where sname like \"李%\" and exists(select * from student where year(current_date)-year(a.sbirthday)&gt;30); 三、相关子查询(in)依赖于外层查询结果 表：sc 字段：* (所有) 作用：把外层查询到的结果，放入内层去查询再返回结果 要求：查询 每课成绩大于平均成绩的信息 select * from sc a where degree &gt; (select avg(degree) from sc where a.sno=sc.sno);","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"嵌套查询","slug":"嵌套查询","permalink":"https://hao-yu.top/tags/%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/"}]},{"title":"MYSQL数据库基础(五) 多表链接查询","slug":"MYSQL数据库基础-五-数据表的查询二-多表链接查询","date":"2022-05-26T06:50:35.000Z","updated":"2022-07-27T05:02:41.014Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-wu-shu-ju-biao-de-cha-xun-er-duo-biao-lian-jie-cha-xun/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-wu-shu-ju-biao-de-cha-xun-er-duo-biao-lian-jie-cha-xun/","excerpt":"","text":"一、笛卡尔积 连接查询表：student 、 sc 字段：student.* (student 表的所有字段) sc.*(sc表的所有字段) 要求：student 和 sc 表用笛卡尔积进行连接查询 select student.*,sc.* from student,sc; 二、内连接查询(inner join on)表：student 、 sc 字段：student.* (student 表的所有字段) sc.*(sc表的所有字段) 要求：student 和 sc 表用内连接进行查询 select student.*,sc.* from student inner join sc on student.sno=sc.sno; 三、左连接查询(left join on)表：student 、 sc 字段：student.* (student 表的所有字段) sc.*(sc表的所有字段) 要求：student 和 sc 表用左连接进行查询 select student.*,sc.* from student left join sc on student.sno=sc.sno; 四、右连接查询(rigth join on)表：student 、 sc 字段：student.* (student 表的所有字段) sc.*(sc表的所有字段) 要求：student 和 sc 表用右连接进行查询 select student.*,sc.* from student right join sc on student.sno=sc.sno; 五、内连接查询(inner join on)表：student a (student 取名为a) 字段：student.* (student 表的所有字段) a.sno (a表的sno字段) 要求：student表用内连接进行查询 select * from student a inner join student b on a.sno=b.sno;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"多表链接","slug":"多表链接","permalink":"https://hao-yu.top/tags/%E5%A4%9A%E8%A1%A8%E9%93%BE%E6%8E%A5/"}]},{"title":"MYSQL数据库基础(四) 简单查询","slug":"MYSQL数据库基础-四-数据表的查询一-简单查询","date":"2022-05-26T06:48:46.000Z","updated":"2022-07-27T05:02:51.642Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-si-shu-ju-biao-de-cha-xun-yi-jian-dan-cha-xun/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-si-shu-ju-biao-de-cha-xun-yi-jian-dan-cha-xun/","excerpt":"","text":"一、简单查询1、查询student 数据表所有数据表：student 字段：* (所有) 条件：无 select * from student; 2、查询student 表的 指定字段数据表：student 字段：sno (学号)、sname(姓名)、ssex(性别) 条件：无 select sno,sname,ssex from student; 3、查询student 表的 指定字段数据 并改列名显示 (as)表：student 字段：sno (学号)、sname(姓名)、ssex(性别) 条件：[sno 改为 学号 ]、[sname 改为 姓名 ]、[ssex 改为 性别 ] select sno as 学号,sname as 姓名,ssex as 性别 from student; 4、查询sc 表 打折(数学运算)表：sc 字段：sno(学号)、degree(成绩) 条件：成绩打八折 select sno,degree*0.8 from sc; 5、查询student 表 指定条件(where)表：student 字段：sno (学号)、sname(姓名)、ssex(性别) 条件：ssex 字段数据为 “男” select sno,sname,ssex from student where ssex = \"男\"; 6、查询sc 表 取区间[(between and)、(not between and)]表：sc 字段：* (所有)、degree(成绩) 条件：只要查询 degree(成绩) 在80~90 的 所有数据(between and) select * from sc where degree between 80 and 90; 条件：只要查询 degree(成绩) 不在80~90 的 所有数据(not between and) select * from sc where degree not between 80 and 90; 7、查询sc 表 取集合[(in)、(not in)、(or)]表：sc 字段：* (所有)、degree(成绩) 条件：只要查询 degree(成绩) 为 {92、85、90} 的数据(in) select * from sc where degree in (92,85,90); 条件：只要查询 degree(成绩) 不为 {92、85、90}的 数据(not in) select * from sc where degree not in (92,85,90); 条件：只要查询 degree(成绩) 为 90 或 85 的 数据(in or) select * from sc where degree in (90) or degree in (85); 8、查询student 表 空值(null)表：student 字段：classno (班级号) 条件：查看 classno 字段 为空值的行(is) select * from student where classno is null; 条件：查看 classno 字段 不为空值的行(not is) select * from student where classno is not null; 9、查询student 表 只取 前两条(limit)表：student 字段：* (所有) 条件：只要查询到的 前两条 select * from student limit 2; select * from student limit 0,2; 二、简单查询(模糊查询)1、查询student 表 查询姓刘的学生(like) 模糊查询：escape “#” 把 “#” 用于转义字符的字符 --&gt; % 匹配任意多个字符 --&gt; _ 匹配单个任意字符 表：student 字段：* (所有)、sname(姓名)、sdept(学院) 条件：只要查询sname(姓名) 姓刘 的信息 select * from student where sname like \"刘%\"; 条件：只要查询sname(姓名) 姓刘 单名 的信息 select * from student where sname like \"刘_\"; 条件：只要查询sdept(学院) 为 “计算机_” 开始 的信息 select * from student where sdept like \"计算机#_%\" escape \"#\"; 2、查询student 表 查询姓刘的学生(regexp)正则表达式：regexp 表：student 字段：* (所有)、sname(姓名)、sdept(学院) 条件：只要查询sdept(学院) 为 “计算机_” 开始 的信息 select * from student where sdept regexp \"^计算机_.\"; 三、简单查询 (引入函数)1、查询student 表 学生年龄 [ year()、current_date()] 函数：1、year() 取出年份 2、current_date() 现在的日期 表：student 字段：sno (学号)、sname(姓名)、ssex(性别)、sbirthday(出生日期) 条件：用函数处理 sbirthday 字段 ，拿到年龄 select sno as 学号,sname as 姓名,ssex as 性别,year(current_date())-year(sbirthday) as 年龄 from student; 2、查询student 表 去重复 (distinct)函数：1、distinct 去除重复值 表：student 字段：ssex(性别)、 条件：用函数处理 ssex字段 ，拿到所拥有的性别 select distinct(ssex) from student; 3、查询sc 表 数学函数、 函数： 1、max() 提取最大值 2、min() 最小值 3、avg() 平均值 4、count() 统计行数 表：sc 字段：degree(成绩) 条件：查询degree 最大值 select max(degree) from sc; 条件：查询degree 最小值 select min(degree) from sc; 条件：查询degree 平均值 select avg(degree) from sc; 条件：查询degree 总行数 select count(degree) from sc;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"简单查询","slug":"简单查询","permalink":"https://hao-yu.top/tags/%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/"}]},{"title":"MYSQL数据库基础(三) 数据数据增、删、改","slug":"MYSQL数据库基础-三-数据数据增、删、改","date":"2022-05-26T06:46:23.000Z","updated":"2022-07-27T05:03:17.368Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-san-shu-ju-shu-ju-zeng-shan-gai/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-san-shu-ju-shu-ju-zeng-shan-gai/","excerpt":"","text":"一、 向数据表插入数据(insert into)表：teaching数据：C01 101 | C02 102字段：cno tno insert into teaching(cno,tno) values(\"C01\",\"101\"),(\"C01\",\"102\"); 在添加的数据填满表字段时，可省掉字段, 即：insert into teaching values(\"C01\",\"101\"),(\"C01\",\"102\"); 二、 删除数据表的数据(delete)1、删除指定字段整列数据表：student 数据：sno 字段为 2005020103 的那列数据 delete from student where sno = 2005020103; 2、删除数据表所有数据表：student delete from student; 三、修改数据库的数据(update)1、修改指定数据表：student 修该：把 sno = 2005010101 的 sname 字段的内容为 刘一二 update student set sname = \"刘一二\" where sno = 2005010101; 2、修改整个数据表中的指定列表：student 修改：把 整个表的所有asddress 字段都修改为 “广东茂名” update student set saddress = \"广东茂名\"; ​​​","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据表","slug":"数据表","permalink":"https://hao-yu.top/tags/%E6%95%B0%E6%8D%AE%E8%A1%A8/"}]},{"title":"MYSQL数据库基础(二) 数据表结构操作","slug":"MYSQL数据库基础-二-数据表结构操作","date":"2022-05-26T06:43:23.000Z","updated":"2022-07-27T05:03:57.623Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-er-shu-ju-biao-jie-gou-cao-zuo/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-er-shu-ju-biao-jie-gou-cao-zuo/","excerpt":"","text":"一、创建数据表1.创建数据表并设置主键数据表：xiaoyudi_tbl字段：name age数据类型和范围：varchar(20) int设置不允许为空值：not null设置主键：primary key create table xiaoyudi_tbl(name varchar(20) not null primary key,age int); 2.创建数据表并设置字符集设置字符集为utf8：charset=utf8 create table xiaoyudi1_tbl(name varchar(20),age int)charset=utf8; 二、数据表操作1、显示数据表的字段类型等数据表：xiaoyudi_tbl desc xiaoyudi_tbl; 2、修改数据表名旧表名：xiaoyudi_tbl新表名：student_1_tbl rename table xiaoyudi_tbl to student_1_tbl; alter table xiaoyudi_tbl rename as student_1_tbl; 3、查看数据表创建信息数据表：xiaoyudi_tbl show create table xiaoyudi_tbl; 4、复制数据表复制表：student_1_tbl新建表：xiaoyudi_cp create table xiaoyudi_cp select * from student_1_tbl; 5、添加字段并设置默认值并加到指定字段之后(after)添加字段：备注 varchar(50)默认值：无指定字段：classname alter table cp add 备注 varchar(50) default \"无\" after classname； 6、修改字段长度(modify)修改字段长度：header char(15) alter table cp modify header char(15); 7、修改字段(change)修改目标字段：inyear修改后字段：入学时间 alter table cp change inyear 入学时间; 8、修改字段默认值字段：备注默认值：班级注释 alter table cp alter column 备注 set default \"班级注释\"; 9、删除字段字段：inyear alter table cp drop inyear; 10、修改表的存储引擎(engine)引擎MyISAM：MyISAM表：cp alter table cp engine=MyISAM; 11、删除表表：cp drop table cp; 三、主键约束(primary key)1、为表添加主键(primary key)表：student设置为主键的字段：sno alter table student add primary key(sno); 2、为表添加主键并设置字段约束名(constraint)表：student设置为主键的字段：sno字段约束名：PK_student_sno alter table student add constraint PK_student_sno primary key(sno); 3、删除表主键表：sc主键：primary key alter table sc drop primary key; 4、为表设置组合主键表：sc组合主键：cno sno alter table sc add constraint PK_sc_cnosno primary key(cno,sno); 四、外键约束(foreign key) 参考(references)1、为表添加外键外键：foreign key参考表与字段：class(classno)字段约束名：FK_stu_class_classno alter table student add constraint FK_stu_class_classno foreign key(classno) references class(classno); 2、根据外键约束名删除表的外键表：class外键约束名：FK_class_department alter table class drop key FK_class_department; alter table class drop foreign key FK_class_department; 3、为表设置唯一值约束(unique)(替代键)和约束名表：student唯一值约束名：IX_student_sid设置的字段：sid alter table student add constraint IX_student_sid unique(sid); 4、删除唯一值约束(index)表：student唯一值约束名：IX_student_sid alter table student drop index IX_student_sid; 6、为字段添加检查约束(check)表 ：xiao_tbl约束条件 ：只允许填入男或女(sex = “男” or “女”)创建表时添加： create table xiao_tbl(sex char(2),check(sex = \"男\" or \"女\")); 创建表后修改表: alter table xiao_tbl add check(sex = \"男\" or \"女\");","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据表","slug":"数据表","permalink":"https://hao-yu.top/tags/%E6%95%B0%E6%8D%AE%E8%A1%A8/"}]},{"title":"MYSQL数据库基础(一) 创建数据库","slug":"MYSQL数据库基础-一-创建数据库","date":"2022-05-26T06:39:53.000Z","updated":"2022-07-27T05:02:31.338Z","comments":true,"path":"2022/05/26/mysql-shu-ju-ku-ji-chu-yi-chuang-jian-shu-ju-ku/","link":"","permalink":"https://hao-yu.top/2022/05/26/mysql-shu-ju-ku-ji-chu-yi-chuang-jian-shu-ju-ku/","excerpt":"","text":"一、创建数据库1、只创建数据库create database 库名; 2、创建数据库并设置编码规则数据库：xiaoyudicharacter set ：设置数据库采用的字符集collate：指定数据库字符集的排序规则* create database xiaoyudi character set utf8 collate utf8_general_ci; create database xiaoyudi character set gbk collate gbk_chinese_ci; 3、查看当前使用的数据库select database(); 二、查看数据库信息1、查看数据库所支持存储引擎show engines; 2.查看数据库所支持的字符集show variables like \"%character%\"; 3、查看数据库所支持的编码规则show variables like \"%collation%\"; 三、其他1、使用数据库数据库：xiaoyudi use xiaoyudi; 2、删除数据表数据表：xiaoyudi1_tbl drop table xiaoyudi1_tbl; 3、编码规则和字符集在创建数据库时设置可以继承给数据表","categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"创建数据库","slug":"创建数据库","permalink":"https://hao-yu.top/tags/%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"python基础之format","slug":"python基础之format","date":"2022-05-22T07:36:19.000Z","updated":"2022-07-27T05:02:19.923Z","comments":true,"path":"2022/05/22/python-ji-chu-zhi-format/","link":"","permalink":"https://hao-yu.top/2022/05/22/python-ji-chu-zhi-format/","excerpt":"","text":"一、无参数print(\"{} {} {}\".format(\"hello\",\"world\",\"!\")) &gt;&gt;&gt; hello world ! print(\"{0} {1} {2}\".format(\"hello\",\"world\",\"!\")) &gt;&gt;&gt; hello world ! print(\"{id} {name} {age}岁\".format(id=\"20200\",\"Tom\",\"16\")) &gt;&gt;&gt; 20200 Tom 16岁 二、列表、字典、类list = [\"hello\",\"world\",\"!\"] print(\"{list[0]} {list[1]} {list[2]}\".format(list=list)) &gt;&gt;&gt; hello world ! dict = {\"id\" :\"20200\", \"name\":\"xiaoming\", \"age\" :\"16\"} print(\"{id} {name} {age}岁\".format(**dict)) &gt;&gt;&gt; 20200 xiaoming 16岁 class user(): id = \"20200\" name = \"xiaoming\" age = \"16\" print(\"{user.id} {user.name} {age}岁\".format(user=user)) &gt;&gt;&gt; 20200 xiaoming 16岁 三、魔法参数*args 表示任何多个无名参数，它是一个tuple or list； **kwargs 表示关键字参数，它是一个 dict。 list = [\"--&gt;\",\"&lt;--\"] dict = {\"a\":\"hello\", \"b\":\"world\", \"c\":\"!\" } print(\"{a} {} {b} {} {c}\".format(*list,**dict)) &gt;&gt;&gt; hello –&gt; world &lt;– ! 四、数字格式化1、小数保留 数字 格式 输出 描述 1.23456 “{:2f}” 1.23 保留小数点后两位 1.23456 “{:+.2f}” +1.23 带符号保留小数点后两位 -1.2345 “{:+.2f}” -1.23 带符号保留小数点后两位 1.23456 “{:.0f}” 1 不带小数 a = 1.23456 print(\"{:.2f}\".format(a)) print(\"{:+.2f}\".format(a)) b = -1.2345 print(\"{:+.2f}\".format(b)) print(\"{:.0f}\".format(a)) &gt;&gt;&gt; 1.23 &gt;&gt;&gt; +1.23 &gt;&gt;&gt; -1.23 &gt;&gt;&gt; 1 2、填充0 的位置也可为其他字符 (不填默认空格填充) 输入 格式 输出 描述 123 “{:0&gt;6d}” 000123 用 0 填充左边，宽度为6 123 “{:0&lt;6d}” 123000 用 0 填充右边，宽度为6 123 “{:0^6d}” 012300 用 0 填充居中，宽度为6 “你好” “{:-&gt;6}” —-你好 当处理字符串时时，去掉 d 。 a = 123 print(\"{:0&gt;6d}\".format(a)) print(\"{:0&lt;6d}\".format(a)) print(\"{:0^6d}\".format(a)) print(\"{:-&gt;6}\".format(\"你好\")) &gt;&gt;&gt; 000123&gt;&gt;&gt; 123000&gt;&gt;&gt; 012300&gt;&gt;&gt; —-你好 3、逗号、百分比、指数 输入 格式 输出 描述 100000 “{:,}” 100,000 以逗号分隔的数字格式 100000 “{:.2e}” 1.00e+05 指数记法 0.13 “{:.2%}” 13% 百分比格式 a = 100000 print(\"{:,}\".format(a)) print(\"{:.2e}\".format(a)) b = 0.13 print(\"{:.2%}\".format(b)) &gt;&gt;&gt; 100,000 &gt;&gt;&gt; 1.00e+05 &gt;&gt;&gt; 13.00% 4、进制 输入 格式 输出 描述 123 “{:b}” 1111011 二进制 123 “{:d}” 123 十进制 123 “{:o}” 173 八进制 123 “{:x}” 7b 十六进制 123 “{:#x}” 0x7b 0x式十六进制 字母小写 123 “{:#X}” 0X7B 0x式十六进制 字母大写 a = 123 print(\"{:b}\".format(a)) print(\"{:d}\".format(a)) print(\"{:o}\".format(a)) print(\"{:x}\".format(a)) print(\"{:#x}\".format(a)) print(\"{:#X}\".format(a)) &gt;&gt;&gt; 1111011 &gt;&gt;&gt; 123 &gt;&gt;&gt; 173 &gt;&gt;&gt; 7b &gt;&gt;&gt; 0x7b &gt;&gt;&gt; 0X7B 五、叹号用法！后面可以加s r a 分别对应str() repr() ascii() 作用是在填充前先用对应的函数来处理参数差别就是str()是面向用户的，目的是可读性，repr()带有引号，ascii()是面向Python解析器的，返回值表示在python内部的含义,ascii (),返回ascii编码 print(\"{!s}\".format(\"你\")) print(\"{!r}\".format(\"你\")) print(\"{!a}\".format(\"你\")) &gt;&gt;&gt; 你 &gt;&gt;&gt; ‘你’ &gt;&gt;&gt; ‘\\u4f60’","categories":[{"name":"python","slug":"python","permalink":"https://hao-yu.top/categories/python/"}],"tags":[{"name":"format","slug":"format","permalink":"https://hao-yu.top/tags/format/"}]},{"title":"python基础之文件操作","slug":"python基础之文件操作","date":"2022-05-22T04:29:34.000Z","updated":"2022-07-27T05:01:44.866Z","comments":true,"path":"2022/05/22/python-ji-chu-zhi-wen-jian-cao-zuo/","link":"","permalink":"https://hao-yu.top/2022/05/22/python-ji-chu-zhi-wen-jian-cao-zuo/","excerpt":"","text":"一、访问模式说明 模式 说明 r 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 w 用与打开文件和写入，文件存在则覆盖，不存在则创建 a 用于追加，文件存在则把文字追加到后面，没有则创建，再写入 rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。 wb 以二进制格式打开一个文件只用于写入。文件已存在则覆盖。文件不存在，创建新文件。 ab 以二进制格式打开一个文件用于追加。文件已存在，新的内容将会被写入到已有内容之后。文件不存在，则创建再写入 r+ 打开一个文件用于读写。文件指针将会放在文件的开头。 w+ 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 a+ 打开一个文件用于读写，如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果改文件不存在，创建新文件用于读写。 rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头 wb+ 以二进制格式打开一个文件用于读写。文件存在则覆盖。改文件不存在，则新建文件。 ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果改文件不存在，创建新文件用于读写。 二、打开的读写操作open(path,mode,encoding,newline) 主要参数 是否必须 说明 path 是 文件路径 mode 是 打开模式 encoding 否，默认None 编码格式 newline 否 newline=”” 默认为换行 1、打开1.txt 文件 和 关闭文件(close()) a = open(\"1.txt\",\"w\",encoding=\"utf8\") a.close() 2、用with 打开文件，with 会自动关闭文件。 with open(\"1.txt\",\"w\",encoding=\"utf8\") as F: F.write(\"\") 3、创建一个 demo.txt 文件并写入 “好好学习，” with open(\"demo.txt\",\"w\",encoding=\"utf8\") as F: F.write(\"好好学习，\") 4、打开demo.txt 文件 并把 “ 天天向上 “ 追加到文件末尾 with open(\"demo.txt\",\"a\",encoding=\"utf8\") as F: F.write(\"天天向上\") 5、读取 demo.txt 文件的所有内容 with open(\"demo.txt\",\"r\",encoding=\"utf8\") as F: print(F.read()) &gt;&gt;&gt; 好好学习，天天向上 6、按行读取 三字经.txt 文件内容( readline ) with open(\"三字经.txt\", \"r\", encoding=\"utf8\") as F: i = 1 while i&lt;118: print(F.readline()) i+=1 7、读取三字经所有内容并返回 列表 (readlines 返回一个列表) 并遍历打印 with open(\"三字经.txt\", \"r\", encoding=\"utf8\") as F: for i in F.readlines(): print(i) 三、指定位置插入文本seek(offset,whence) 方法 参数 说明 offset 将光标向前移动n个位置 whence 参考位置，一般参数为 0,1,2 –&gt; 0 ：将开头作为参考位置 –&gt; 1：将当前作为参考位置 –&gt; 2：将末尾作为参考位置 1、在 demo.txt 文件开头写入 “我们要做” with open(\"demo.txt\",\"r+\") as F: con = F.read() #记录之前的内容 F.seek(0,0) F.write(\"我们要做到\"+con) 四、CSV 文件操作方法： writer() 返回一个writer 对像 并提供一个writerow 方法 将内容按行写入到文件中 reader() 返回一个生成器 通过遍历生成器 进而取出所有内容 1、将三字经.txt 写入到 deom.csv 文件中 import csv with open(\"三字经.txt\", \"r\", encoding=\"utf8\") as F: with open(\"demo.csv\",\"w\",encoding=\"utf8\",newline=\"\") as f: #创建一个文件对象 f_csv = csv.writer(f) #创建一个csv写入对象 for i in F.readlines(): f_csv.writerow(i) 2、读取 demo.csv 文件的所有内容 import csv with open(\"demo.csv\",\"r\",encoding=\"utf8\",newline=\"\") as f: #创建一个文件对象 f_csv = csv.reader(f) #返回一个可遍历对象 for i in f_csv: print(i) 五、JSON文件操作json 常用方法 方法 描述 json.dump 将Python对象编码存入.json文件中 json.load 将.josn文件解析成Python对象 json.dumps 将Python 对象编码为json字符串 json.loads 将json已编码字符串解析为Python 对象 1、将一个字典编码成json 字符串 import json dict = { \"a\":123, \"b\":567 } json_dump = json.dumps(dict) #对一个字典对象进行json编码成json字符串 print(json_dump) print(type(json_dump)) &gt;&gt;&gt; {“a”: 123, “b”: 567}&gt;&gt;&gt; &lt;class ‘str’&gt; 2、将一个已编码的json 字符串解码为Python 对象 import json dict = { \"a\":123, \"b\":567 } json_dump = json.dumps(dict) json_load = json.loads(json_dump) #对一个已编码的json 字符串解码成Python对象 print(json_load) print(type(json_load)) &gt;&gt;&gt; {‘a’: 123, ‘b’: 567}&gt;&gt;&gt; &lt;class ‘dict’&gt; 3、将Python对象编码存入demo1.json文件中 方法： dump(obj,file) obj : 字典对象 file 文件对象 import json dict = { \"a\":123, \"b\":567 } with open(\"demo1.json\",\"w\") as F: #创建一个文件对象 json_dump = json.dump(dict,F) 4、将 demo1.josn文件解析成Python对象并输出 import json with open(\"demo1.json\",\"r\") as F: json_load = json.load(F) print(json_load) print(type(json_load)) &gt;&gt;&gt; {‘a’: 123, ‘b’: 567}&gt;&gt;&gt; &lt;class ‘dict’&gt; 5、","categories":[{"name":"python","slug":"python","permalink":"https://hao-yu.top/categories/python/"}],"tags":[]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"https://hao-yu.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"python","slug":"python","permalink":"https://hao-yu.top/categories/python/"}],"tags":[{"name":"编程","slug":"编程","permalink":"https://hao-yu.top/tags/%E7%BC%96%E7%A8%8B/"},{"name":"索引","slug":"索引","permalink":"https://hao-yu.top/tags/%E7%B4%A2%E5%BC%95/"},{"name":"字符串操作","slug":"字符串操作","permalink":"https://hao-yu.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"},{"name":"进制转换","slug":"进制转换","permalink":"https://hao-yu.top/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"},{"name":"数据结构","slug":"数据结构","permalink":"https://hao-yu.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"视图","slug":"视图","permalink":"https://hao-yu.top/tags/%E8%A7%86%E5%9B%BE/"},{"name":"view","slug":"view","permalink":"https://hao-yu.top/tags/view/"},{"name":"聚集函数查询","slug":"聚集函数查询","permalink":"https://hao-yu.top/tags/%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/"},{"name":"嵌套查询","slug":"嵌套查询","permalink":"https://hao-yu.top/tags/%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/"},{"name":"多表链接","slug":"多表链接","permalink":"https://hao-yu.top/tags/%E5%A4%9A%E8%A1%A8%E9%93%BE%E6%8E%A5/"},{"name":"简单查询","slug":"简单查询","permalink":"https://hao-yu.top/tags/%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/"},{"name":"数据表","slug":"数据表","permalink":"https://hao-yu.top/tags/%E6%95%B0%E6%8D%AE%E8%A1%A8/"},{"name":"创建数据库","slug":"创建数据库","permalink":"https://hao-yu.top/tags/%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"format","slug":"format","permalink":"https://hao-yu.top/tags/format/"}]}