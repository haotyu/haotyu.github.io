<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MYSQL数据库基础(一) 创建数据库</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%B8%80-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、创建数据库"><a href="#一、创建数据库" class="headerlink" title="一、创建数据库"></a>一、创建数据库</h3><h5 id="1、只创建数据库"><a href="#1、只创建数据库" class="headerlink" title="1、只创建数据库"></a>1、只创建数据库</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create database 库名;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="2、创建数据库并设置编码规则"><a href="#2、创建数据库并设置编码规则" class="headerlink" title="2、创建数据库并设置编码规则"></a>2、创建数据库并设置编码规则</h5><p><strong>数据库</strong>：xiaoyudi<br><strong>character set</strong> ：设置数据库采用的字符集<br><strong>collate</strong>：指定数据库字符集的排序规则*</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create database xiaoyudi character set utf8 collate utf8_general_ci;<br>create database xiaoyudi character set gbk collate gbk_chinese_ci;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="3、查看当前使用的数据库"><a href="#3、查看当前使用的数据库" class="headerlink" title="3、查看当前使用的数据库"></a>3、查看当前使用的数据库</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">select database();<br></code></pre></td></tr></tbody></table></figure>
<h3 id="二、查看数据库信息"><a href="#二、查看数据库信息" class="headerlink" title="二、查看数据库信息"></a>二、查看数据库信息</h3><h5 id="1、查看数据库所支持存储引擎"><a href="#1、查看数据库所支持存储引擎" class="headerlink" title="1、查看数据库所支持存储引擎"></a>1、查看数据库所支持存储引擎</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show engines;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="2-查看数据库所支持的字符集"><a href="#2-查看数据库所支持的字符集" class="headerlink" title="2.查看数据库所支持的字符集"></a>2.查看数据库所支持的字符集</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show variables like "%character%";<br></code></pre></td></tr></tbody></table></figure>
<h5 id="3、查看数据库所支持的编码规则"><a href="#3、查看数据库所支持的编码规则" class="headerlink" title="3、查看数据库所支持的编码规则"></a>3、查看数据库所支持的编码规则</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show variables like "%collation%";<br></code></pre></td></tr></tbody></table></figure>
<h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><h5 id="1、使用数据库"><a href="#1、使用数据库" class="headerlink" title="1、使用数据库"></a>1、使用数据库</h5><p>数据库：xiaoyudi</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">use xiaoyudi;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="2、删除数据表"><a href="#2、删除数据表" class="headerlink" title="2、删除数据表"></a>2、删除数据表</h5><p><em><strong>数据表</strong></em>：xiaoyudi1_tbl</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">drop table xiaoyudi1_tbl;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="3、编码规则和字符集在创建数据库时设置可以继承给数据表"><a href="#3、编码规则和字符集在创建数据库时设置可以继承给数据表" class="headerlink" title="3、编码规则和字符集在创建数据库时设置可以继承给数据表"></a>3、编码规则和字符集在创建数据库时设置可以继承给数据表</h5>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>创建数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(七) 聚集函数查询</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%B8%83-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%9B%9B-%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、按某列-升-降-排序-order-by"><a href="#一、按某列-升-降-排序-order-by" class="headerlink" title="一、按某列   升   降   排序(order by)"></a>一、按某列   升   降   排序(order by)</h3><h4 id="1、按升序排序-asc"><a href="#1、按升序排序-asc" class="headerlink" title="1、按升序排序(asc)"></a>1、按升序排序(asc)</h4><p>说明：系统默认按升序排序</p>
<p>表：sc</p>
<p>字段： * (所有)  degree(成绩)</p>
<p>要求：查询sc 并 让 degree 按升序输出</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc order by degree asc;<br></code></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc order by degree;<br></code></pre></td></tr></tbody></table></figure>

<p>两个或多个字段 用逗号隔开</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc order by degree asc,sno asc;<br></code></pre></td></tr></tbody></table></figure>



<h3 id="2、按降序排序-desc"><a href="#2、按降序排序-desc" class="headerlink" title="2、按降序排序(desc)"></a>2、按降序排序(desc)</h3><p>表：sc</p>
<p>字段： * (所有)  degree(成绩)</p>
<p>要求：查询sc 并 让 degree 按降序输出</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc order by degree desc;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="二、按组合输出-group-by-having"><a href="#二、按组合输出-group-by-having" class="headerlink" title="二、按组合输出(group by [having])"></a>二、按组合输出(group by [having])</h3><h4 id="1、简单分组"><a href="#1、简单分组" class="headerlink" title="1、简单分组"></a>1、简单分组</h4><p>表：student</p>
<p>字段：classno  </p>
<p>函数：count()  统计列</p>
<p>要求：统计输出各班学生的人数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select classno,count(*) from student group by classno;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、分组加条件-having"><a href="#2、分组加条件-having" class="headerlink" title="2、分组加条件(having)"></a>2、分组加条件(having)</h4><p>表：sc</p>
<p>字段：sno </p>
<p>函数：count()  统计列</p>
<p>要求：查询选修了2门以上课程的学生学号和选修门数。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select sno,count(*) from sc group by sno having count(*) &gt;2;<br></code></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>聚集函数查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(三) 数据数据增、删、改</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%B8%89-%E6%95%B0%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%A2%9E%E3%80%81%E5%88%A0%E3%80%81%E6%94%B9/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、-向数据表插入数据-insert-into"><a href="#一、-向数据表插入数据-insert-into" class="headerlink" title="一、 向数据表插入数据(insert into)"></a>一、 向数据表插入数据(insert into)</h3><p><strong>表</strong>：teaching<br><strong>数据</strong>：C01    101 | C02    102<br><strong>字段</strong>：cno    tno</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">insert into teaching(cno,tno) values("C01","101"),("C01","102");<br></code></pre></td></tr></tbody></table></figure>
<p>在添加的数据填满表字段时，可省掉字段,</p>
<ul>
<li>即：<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">insert into teaching values("C01","101"),("C01","102");<br></code></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="二、-删除数据表的数据-delete"><a href="#二、-删除数据表的数据-delete" class="headerlink" title="二、 删除数据表的数据(delete)"></a>二、 删除数据表的数据(delete)</h3><h5 id="1、删除指定字段整列数据"><a href="#1、删除指定字段整列数据" class="headerlink" title="1、删除指定字段整列数据"></a>1、删除指定字段整列数据</h5><p>表：student</p>
<p>数据：sno 字段为 2005020103 的那列数据</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">delete from student where sno = 2005020103;<br></code></pre></td></tr></tbody></table></figure>

<h5 id="2、删除数据表所有数据"><a href="#2、删除数据表所有数据" class="headerlink" title="2、删除数据表所有数据"></a>2、删除数据表所有数据</h5><p>表：student</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">delete from student;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="三、修改数据库的数据-update"><a href="#三、修改数据库的数据-update" class="headerlink" title="三、修改数据库的数据(update)"></a>三、修改数据库的数据(update)</h3><h5 id="1、修改指定数据"><a href="#1、修改指定数据" class="headerlink" title="1、修改指定数据"></a>1、修改指定数据</h5><p>表：student </p>
<p>修该：把 sno = 2005010101 的 sname 字段的内容为 刘一二 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">update student set sname = "刘一二" where sno = 2005010101;<br></code></pre></td></tr></tbody></table></figure>

<h5 id="2、修改整个数据表中的指定列"><a href="#2、修改整个数据表中的指定列" class="headerlink" title="2、修改整个数据表中的指定列"></a>2、修改整个数据表中的指定列</h5><p>表：student</p>
<p>修改：把 整个表的所有asddress 字段都修改为 “广东茂名”</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">update student set saddress = "广东茂名";<br></code></pre></td></tr></tbody></table></figure>


<p>​<br>​<br>​    </p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据表</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(二) 数据表结构操作</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、创建数据表"><a href="#一、创建数据表" class="headerlink" title="一、创建数据表"></a>一、创建数据表</h3><h5 id="1-创建数据表并设置主键"><a href="#1-创建数据表并设置主键" class="headerlink" title="1.创建数据表并设置主键"></a>1.创建数据表并设置主键</h5><p><em><strong>数据表</strong></em>：xiaoyudi_tbl<br><em><strong>字段</strong></em>：name age<br><em><strong>数据类型和范围</strong></em>：varchar(20)   int<br><em><strong>设置不允许为空值</strong></em>：not null<br><em><strong>设置主键</strong></em>：primary key</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create table xiaoyudi_tbl(name varchar(20) not null primary key,age int);<br></code></pre></td></tr></tbody></table></figure>
<h5 id="2-创建数据表并设置字符集"><a href="#2-创建数据表并设置字符集" class="headerlink" title="2.创建数据表并设置字符集"></a>2.创建数据表并设置字符集</h5><p><em><strong>设置字符集为utf8</strong></em>：charset=utf8</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create table xiaoyudi1_tbl(name varchar(20),age int)charset=utf8;<br></code></pre></td></tr></tbody></table></figure>
<h3 id="二、数据表操作"><a href="#二、数据表操作" class="headerlink" title="二、数据表操作"></a>二、数据表操作</h3><h5 id="1、显示数据表的字段类型等"><a href="#1、显示数据表的字段类型等" class="headerlink" title="1、显示数据表的字段类型等"></a>1、显示数据表的字段类型等</h5><p><em><strong>数据表</strong></em>：xiaoyudi_tbl</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">desc xiaoyudi_tbl;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="2、修改数据表名"><a href="#2、修改数据表名" class="headerlink" title="2、修改数据表名"></a>2、修改数据表名</h5><p><em><strong>旧表名</strong></em>：xiaoyudi_tbl<br><em><strong>新表名</strong></em>：student_1_tbl</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">rename table xiaoyudi_tbl to student_1_tbl;<br>alter table xiaoyudi_tbl rename as student_1_tbl;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="3、查看数据表创建信息"><a href="#3、查看数据表创建信息" class="headerlink" title="3、查看数据表创建信息"></a>3、查看数据表创建信息</h5><p><em><strong>数据表</strong></em>：xiaoyudi_tbl</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">show create table xiaoyudi_tbl;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="4、复制数据表"><a href="#4、复制数据表" class="headerlink" title="4、复制数据表"></a>4、复制数据表</h5><p><em><strong>复制表</strong></em>：student_1_tbl<br><em><strong>新建表</strong></em>：xiaoyudi_cp</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create table xiaoyudi_cp select * from student_1_tbl;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="5、添加字段并设置默认值并加到指定字段之后-after"><a href="#5、添加字段并设置默认值并加到指定字段之后-after" class="headerlink" title="5、添加字段并设置默认值并加到指定字段之后(after)"></a>5、添加字段并设置默认值并加到指定字段之后(after)</h5><p><em><strong>添加字段</strong></em>：备注 varchar(50)<br><em><strong>默认值</strong></em>：无<br><em><strong>指定字段</strong></em>：classname</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table cp add 备注 varchar(50) default "无" after classname；<br></code></pre></td></tr></tbody></table></figure>
<h5 id="6、修改字段长度-modify"><a href="#6、修改字段长度-modify" class="headerlink" title="6、修改字段长度(modify)"></a>6、修改字段长度(modify)</h5><p><em><strong>修改字段长度</strong></em>：header char(15)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table cp modify header char(15);<br></code></pre></td></tr></tbody></table></figure>
<h3 id="7、修改字段-change"><a href="#7、修改字段-change" class="headerlink" title="7、修改字段(change)"></a>7、修改字段(change)</h3><p><em><strong>修改目标字段</strong></em>：inyear<br><em><strong>修改后字段</strong></em>：入学时间</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table cp change inyear 入学时间;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="8、修改字段默认值"><a href="#8、修改字段默认值" class="headerlink" title="8、修改字段默认值"></a>8、修改字段默认值</h5><p><em><strong>字段</strong></em>：备注<br><em><strong>默认值</strong></em>：班级注释</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table cp alter column 备注 set default "班级注释";<br></code></pre></td></tr></tbody></table></figure>
<h5 id="9、删除字段"><a href="#9、删除字段" class="headerlink" title="9、删除字段"></a>9、删除字段</h5><p><em><strong>字段</strong></em>：inyear</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table cp drop inyear;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="10、修改表的存储引擎-engine"><a href="#10、修改表的存储引擎-engine" class="headerlink" title="10、修改表的存储引擎(engine)"></a>10、修改表的存储引擎(engine)</h5><p><em><strong>引擎</strong>MyISAM</em>：MyISAM<br><em><strong>表</strong></em>：cp</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table cp engine=MyISAM;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="11、删除表"><a href="#11、删除表" class="headerlink" title="11、删除表"></a>11、删除表</h5><p><em><strong>表</strong></em>：cp</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">drop table cp;<br></code></pre></td></tr></tbody></table></figure>
<h3 id="三、主键约束-primary-key"><a href="#三、主键约束-primary-key" class="headerlink" title="三、主键约束(primary key)"></a>三、主键约束(primary key)</h3><h5 id="1、为表添加主键-primary-key"><a href="#1、为表添加主键-primary-key" class="headerlink" title="1、为表添加主键(primary key)"></a>1、为表添加主键(primary key)</h5><p><em><strong>表</strong></em>：student<br><em><strong>设置为主键的字段</strong></em>：sno</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table student add primary key(sno);<br></code></pre></td></tr></tbody></table></figure>
<h5 id="2、为表添加主键并设置字段约束名-constraint"><a href="#2、为表添加主键并设置字段约束名-constraint" class="headerlink" title="2、为表添加主键并设置字段约束名(constraint)"></a>2、为表添加主键并设置字段约束名(constraint)</h5><p><em><strong>表</strong></em>：student<br><em><strong>设置为主键的字段</strong></em>：sno<br><em><strong>字段约束名</strong></em>：PK_student_sno</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table student add constraint PK_student_sno primary key(sno);<br></code></pre></td></tr></tbody></table></figure>
<h5 id="3、删除表主键"><a href="#3、删除表主键" class="headerlink" title="3、删除表主键"></a>3、删除表主键</h5><p><em><strong>表</strong></em>：sc<br><em><strong>主键</strong></em>：primary key</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table sc drop primary key;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="4、为表设置组合主键"><a href="#4、为表设置组合主键" class="headerlink" title="4、为表设置组合主键"></a>4、为表设置组合主键</h5><p><em><strong>表</strong></em>：sc<br><em><strong>组合主键</strong></em>：cno sno</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table sc add constraint PK_sc_cnosno primary key(cno,sno);<br></code></pre></td></tr></tbody></table></figure>
<h3 id="四、外键约束-foreign-key-参考-references"><a href="#四、外键约束-foreign-key-参考-references" class="headerlink" title="四、外键约束(foreign key)  参考(references)"></a>四、外键约束(foreign key)  参考(references)</h3><h5 id="1、为表添加外键"><a href="#1、为表添加外键" class="headerlink" title="1、为表添加外键"></a>1、为表添加外键</h5><p><em><strong>外键</strong></em>：foreign key<br><em><strong>参考表与字段</strong></em>：class(classno)<br><em><strong>字段约束名</strong></em>：FK_stu_class_classno</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table student add constraint FK_stu_class_classno foreign key(classno) references class(classno);<br></code></pre></td></tr></tbody></table></figure>
<h5 id="2、根据外键约束名删除表的外键"><a href="#2、根据外键约束名删除表的外键" class="headerlink" title="2、根据外键约束名删除表的外键"></a>2、根据外键约束名删除表的外键</h5><p><em><strong>表</strong></em>：class<br><em><strong>外键约束名</strong></em>：FK_class_department</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table class drop key FK_class_department;<br>alter table class drop foreign key FK_class_department;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="3、为表设置唯一值约束-unique-替代键-和约束名"><a href="#3、为表设置唯一值约束-unique-替代键-和约束名" class="headerlink" title="3、为表设置唯一值约束(unique)(替代键)和约束名"></a>3、为表设置唯一值约束(unique)(替代键)和约束名</h5><p><em><strong>表</strong></em>：student<br><em><strong>唯一值约束名</strong></em>：IX_student_sid<br><em><strong>设置的字段</strong></em>：sid</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table student add constraint IX_student_sid unique(sid);<br></code></pre></td></tr></tbody></table></figure>
<h5 id="4、删除唯一值约束-index"><a href="#4、删除唯一值约束-index" class="headerlink" title="4、删除唯一值约束(index)"></a>4、删除唯一值约束(index)</h5><p><em><strong>表</strong></em>：student<br><em><strong>唯一值约束名</strong></em>：IX_student_sid</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table student drop index IX_student_sid;<br></code></pre></td></tr></tbody></table></figure>
<h5 id="6、为字段添加检查约束-check"><a href="#6、为字段添加检查约束-check" class="headerlink" title="6、为字段添加检查约束(check)"></a>6、为字段添加检查约束(check)</h5><p><em><strong>表</strong></em> ：xiao_tbl<br><em><strong>约束条件</strong></em> ：只允许填入<em>男</em>或<em>女</em>(sex = “男” or “女”)<br><strong>创建表时添加</strong>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create table xiao_tbl(sex char(2),check(sex = "男" or "女"));<br></code></pre></td></tr></tbody></table></figure>
<p><strong>创建表后修改表</strong>:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table xiao_tbl add check(sex = "男" or "女");<br></code></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据表</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(九)数据库索引</title>
    <url>/2022/07/01/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%B9%9D-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、创建索引"><a href="#一、创建索引" class="headerlink" title="一、创建索引"></a>一、创建索引</h3><p><strong>方法一：</strong></p>
<p>在创建表时创建索引</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create table abc( id int, sex char(10), name varchar(100), unique index index_id(id)  #创建唯一值索引:id  索引名:为index_id );  <br></code></pre></td></tr></tbody></table></figure>

<p><strong>方法二：</strong></p>
<p>用create 创建索引</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create unique index index_sex on abc(sex); #创建唯一值索引:sex  索引名:为index_sex<br></code></pre></td></tr></tbody></table></figure>

<p><strong>方法三：</strong></p>
<p>在表创建完之后添加索引</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter table abc add unique index index_name(name); # add 添加唯一值索引:name  索引名:为index_name <br></code></pre></td></tr></tbody></table></figure>

<h3 id="二、删除索引"><a href="#二、删除索引" class="headerlink" title="二、删除索引"></a>二、删除索引</h3><p>删除 名为 ：index_name 的索引</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">drop index index_name on abc;<br></code></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(五) 多表链接查询</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%BA%94-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%BA%8C-%E5%A4%9A%E8%A1%A8%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、笛卡尔积-连接查询"><a href="#一、笛卡尔积-连接查询" class="headerlink" title="一、笛卡尔积   连接查询"></a>一、笛卡尔积   连接查询</h3><p>表：student 、 sc</p>
<p>字段：student.* (student 表的所有字段)   sc.*(sc表的所有字段)</p>
<p>要求：student 和 sc 表用笛卡尔积进行连接查询</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select student.*,sc.* from student,sc;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="二、内连接查询-inner-join-on"><a href="#二、内连接查询-inner-join-on" class="headerlink" title="二、内连接查询(inner join   on)"></a>二、内连接查询(inner join   on)</h3><p>表：student 、 sc</p>
<p>字段：student.* (student 表的所有字段)   sc.*(sc表的所有字段)</p>
<p>要求：student 和 sc 表用内连接进行查询</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select student.*,sc.* from student inner join sc on student.sno=sc.sno;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="三、左连接查询-left-join-on"><a href="#三、左连接查询-left-join-on" class="headerlink" title="三、左连接查询(left  join on)"></a>三、左连接查询(left  join on)</h3><p>表：student 、 sc</p>
<p>字段：student.* (student 表的所有字段)   sc.*(sc表的所有字段)</p>
<p>要求：student 和 sc 表用左连接进行查询</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select student.*,sc.* from student left join sc on student.sno=sc.sno;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="四、右连接查询-rigth-join-on"><a href="#四、右连接查询-rigth-join-on" class="headerlink" title="四、右连接查询(rigth join on)"></a>四、右连接查询(rigth join on)</h3><p>表：student 、 sc</p>
<p>字段：student.* (student 表的所有字段)   sc.*(sc表的所有字段)</p>
<p>要求：student 和 sc 表用右连接进行查询</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select student.*,sc.* from student right join sc on student.sno=sc.sno;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="五、内连接查询-inner-join-on"><a href="#五、内连接查询-inner-join-on" class="headerlink" title="五、内连接查询(inner join on)"></a>五、内连接查询(inner join on)</h3><p>表：student a  (student 取名为a)</p>
<p>字段：student.* (student 表的所有字段)  a.sno (a表的sno字段)</p>
<p>要求：student表用内连接进行查询</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student a inner join student b on a.sno=b.sno;<br></code></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>多表链接</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(八) 数据库视图</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E5%85%AB-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、视图介绍"><a href="#一、视图介绍" class="headerlink" title="一、视图介绍"></a>一、视图介绍</h3><p>理解：视图就像一个窗口，每个人在自己家里的窗口往外看，看到的风景是不一样的</p>
<p>视图就是给表开一个窗口，让每个人(角色)看到的风景不一样(数据) </p>
<p>窗口 (视图) 原本是没有风景(数据)的，它只是建立在风景(数据表)之上</p>
<h3 id="二、创建视图-view"><a href="#二、创建视图-view" class="headerlink" title="二、创建视图(view)"></a>二、创建视图(view)</h3><h4 id="1、单表创建视图"><a href="#1、单表创建视图" class="headerlink" title="1、单表创建视图"></a>1、单表创建视图</h4><p>要求：给student表,建立视图(stud)，并且视图只有student表的sno、sname、ssex列，</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create view stud as select sno,sname,ssex from student;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、多表创建视图"><a href="#2、多表创建视图" class="headerlink" title="2、多表创建视图"></a>2、多表创建视图</h4><p>要求：给student 、sc 两表创建视图(stu_sc) ,并且视图只能有student表的 sno、sname列，sc 表的 cno,degree 列  ,</p>
<p>并为每个列取名  sno (学号) sname(姓名)  cno(课程号)  degree(成绩)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">create view stu_sc(学号,姓名,课程号,成绩) as select sc.sno,sname,cno,degree from student,sc;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="3、as-后的查询语句可以像查询表一样操作"><a href="#3、as-后的查询语句可以像查询表一样操作" class="headerlink" title="3、as 后的查询语句可以像查询表一样操作"></a>3、as 后的查询语句可以像查询表一样操作</h4><h3 id="三、更改视图-alter"><a href="#三、更改视图-alter" class="headerlink" title="三、更改视图(alter)"></a>三、更改视图(alter)</h3><p>要求：把视图 (stud) 减少sno 列</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">alter view stud as select sname,ssex from student;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="四、查看视图详细信息"><a href="#四、查看视图详细信息" class="headerlink" title="四、查看视图详细信息"></a>四、查看视图详细信息</h3><p>full</p>
<p>查看所有表的类型，视图和表</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">show full tables;<br></code></pre></td></tr></tbody></table></figure>

<p>desc</p>
<p>查看视图结构 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">desc stud;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="五、更新视图内容"><a href="#五、更新视图内容" class="headerlink" title="五、更新视图内容"></a>五、更新视图内容</h3><h4 id="1、插入数据-insert-into"><a href="#1、插入数据-insert-into" class="headerlink" title="1、插入数据(insert into)"></a>1、插入数据(insert into)</h4><p>要求：向stud 视图插入 一条数据 (“小明”,”男”)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">insert into stud values ("小明","男");<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、更改数据-update"><a href="#2、更改数据-update" class="headerlink" title="2、更改数据(update)"></a>2、更改数据(update)</h4><p>要求：把stud 表 sname 列 的小明 改为 小刚</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">update stud set sname = "小刚" where sname = "小明";<br></code></pre></td></tr></tbody></table></figure>

<h4 id="3、删除数据-delete-from"><a href="#3、删除数据-delete-from" class="headerlink" title="3、删除数据(delete from)"></a>3、删除数据(delete from)</h4><p>要求：向stud 视图删除 一条数据 条件为 sname = “小刚”</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">delete from stud where sname = "小刚";<br></code></pre></td></tr></tbody></table></figure>

<h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>1、视图是逻辑上存在的，而数据表是真实存在的，视图是一个编译好了的SQL语句。</p>
<p>2、在更新视图内容时，实际上是对原表的操作，即：</p>
<p>修改原表，视图也会相应的发生该表，反之也是。</p>
<p>3、视图只能查看原表的部分内容</p>
<p>4、当视图是原表使用聚合函数时，不能修改</p>
<p>5、待补</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>视图</tag>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(六) 嵌套查询</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E5%85%AD-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%B8%89-%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、嵌套查询-in"><a href="#一、嵌套查询-in" class="headerlink" title="一、嵌套查询(in)"></a>一、嵌套查询(in)</h3><p>表：student 、sc</p>
<p>字段：cno 、degree sname</p>
<p>作用：从student表查询到的结果当sc 表的查询条件的一部分</p>
<p>要求：查询 “小明” 同学所选的 cno 和degree 。  </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select cno,degree from sc where sno in (select sno from student where sname = "小明");<br></code></pre></td></tr></tbody></table></figure>

<h3 id="二、嵌套查询-exists"><a href="#二、嵌套查询-exists" class="headerlink" title="二、嵌套查询(exists)"></a>二、嵌套查询(exists)</h3><p>exists 只会返回true 和 false</p>
<p>表：student</p>
<p>字段：sno,sname,sbirthday</p>
<p>作用：把外层查询到的结果，放入内层去对比 结果成立 返回 true 反之 返回false</p>
<p>要求：(1)   查询姓李的同学和年龄超过30岁的学号、姓名、年龄。  </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select sno,sname,year(current_date)-year(sbirthday) from student a where sname like "李%" and exists(select * from student where year(current_date)-year(a.sbirthday)&gt;30);<br></code></pre></td></tr></tbody></table></figure>

<h3 id="三、相关子查询-in"><a href="#三、相关子查询-in" class="headerlink" title="三、相关子查询(in)"></a>三、相关子查询(in)</h3><p>依赖于外层查询结果</p>
<p>表：sc</p>
<p>字段：* (所有)</p>
<p>作用：把外层查询到的结果，放入内层去查询再返回结果</p>
<p>要求：查询 每课成绩大于平均成绩的信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc a where degree &gt; (select avg(degree) from sc where a.sno=sc.sno);<br></code></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>嵌套查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(十)SQL编程基础</title>
    <url>/2022/07/01/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E5%8D%81-SQL%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<p>说明：其实不用缩进的,我这是为了好看。</p>
<h3 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h3><p>1、系统变量 @@变量名</p>
<p>查看当前系统版本和时间</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">select @@variables as "当前版本为",current_date();<br></code></pre></td></tr></tbody></table></figure>

<p>2、用户变量 @变量名</p>
<p>定义一个用户变量 num 赋值为 100</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">set @num = 100;  -- 方法一<br>set @num := 100; --  方法二<br>select @num := 100; -- 方法三<br>select 100 into @num;  -- 方法四<br>select a into @num from table_name where id = 1; -- 方法五 字段 id = 1的 a 字段的值为 100<br>select @num; -- 查看变量值<br></code></pre></td></tr></tbody></table></figure>

<p>3、常量 即：不会变量</p>
<p>4、局部变量  在 begin .. end 之间定义的变量</p>
<h3 id="二、存储过程-procedure"><a href="#二、存储过程-procedure" class="headerlink" title="二、存储过程  procedure"></a>二、存储过程  procedure</h3><p>declare ：用于声明变量</p>
<p>default ：用于设置默认值</p>
<p>call ：用于使用存储过程</p>
<h4 id="1、创建存储过程"><a href="#1、创建存储过程" class="headerlink" title="1、创建存储过程"></a>1、创建存储过程</h4><p>不传参数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create procedure proc_1()  -- 创建一个名为proc_1存储过程<br>begin -- 开始 类似java 的{<br>  declare a int default 1; -- 声明一个局部变量 a 默认值为 1 <br>  select * from test where id = a;  -- 查询表test 字段id = 1 的信息<br>end; -- 结束 类似java 的 }<br><br>call proc_1; -- 使用存储过程<br></code></pre></td></tr></tbody></table></figure>

<p>带传入参数 in </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create procedure proc_2(in a int)  -- in a int 声明一个输入整型参数 a <br>begin <br>  select * from test where id = a;<br>end;<br><br>call proc_2(1); -- 使用存储过程输入参数 1<br></code></pre></td></tr></tbody></table></figure>

<p>带传入 in 参数和 带出 参数 out  </p>
<p>输出的参数用来带出处理后得到的数据，并且输出参数要为用户变量即：@变量名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create procedure proc_3(in a int,out b varchar(10))  -- out 接收输出参数的变量 b<br>begin<br>  select sname into b from test where id = a;  -- 将 name 值 赋给 b<br>end;<br><br>call proc_3(1,@name);  -- 声明用户变量 @name 用来接收输出值<br>select @name; -- 查看变量值<br></code></pre></td></tr></tbody></table></figure>

<p> 传入参数  inout</p>
<p>用于从外部传入变量到存储过程后，经过修改后返回修改后的值赋给传入的变量</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create procedure proc(inout a int)<br>begin<br>  set a = 100;  -- 给a 赋值为 100<br>end;<br>call proc_4(@b);<br>select @b;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、查看存储过程"><a href="#2、查看存储过程" class="headerlink" title="2、查看存储过程"></a>2、查看存储过程</h4><p>查看 proc_1 的定义</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show create procedure proc_1;<br></code></pre></td></tr></tbody></table></figure>

<p>显示所有存储过程</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show procedure status;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="3、删除存储过程"><a href="#3、删除存储过程" class="headerlink" title="3、删除存储过程"></a>3、删除存储过程</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">drop procedure proc_3;<br><br></code></pre></td></tr></tbody></table></figure>

<h3 id="三、函数-function"><a href="#三、函数-function" class="headerlink" title="三、函数  function"></a>三、函数  function</h3><h4 id="1、创建函数"><a href="#1、创建函数" class="headerlink" title="1、创建函数"></a>1、创建函数</h4><p>function ：函数关键字</p>
<p>returns : 用于声名函数返回值的类型，这行不用分号结束</p>
<p>不带出传入参数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">-- 查询 id = 1 的学生姓名<br>create function func_1()<br>returns varchar(10) -- 声明返回值的类型为 变长字符串型并且长度为 10<br>begin<br>  declare a varchar(10) default ""; -- 声明一个变长字符串型的 a 局部变量<br>  select sname into a from test where id = 1; <br>  return a; -- 返回 a 的值<br>end;<br><br>select func_1(); -- 使用自定义函数<br><br></code></pre></td></tr></tbody></table></figure>

<p>带传入参数 ：传参</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">-- 两数相加<br>create function func_2(a int,b int) -- 传入两个整型参数 a,b<br>returns int <br>begin<br>  declare c int;<br>  set c = a + b;  -- 两数相加并赋值给 c<br>  return c;<br>end;<br><br>select func_2(1,2) -- 填入参数 1,2 <br><br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、查看所有函数"><a href="#2、查看所有函数" class="headerlink" title="2、查看所有函数"></a>2、查看所有函数</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show function status;<br><br></code></pre></td></tr></tbody></table></figure>

<h4 id="3、删除函数"><a href="#3、删除函数" class="headerlink" title="3、删除函数"></a>3、删除函数</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">drop function func_3; -- func_3 为函数名<br><br></code></pre></td></tr></tbody></table></figure>

<h3 id="四、触发器-trigger"><a href="#四、触发器-trigger" class="headerlink" title="四、触发器  trigger"></a>四、触发器  trigger</h3><p>触发器（trigger）是SQL server 提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程，它的执行不是由程序调用，也不是手工启动，而是由事件来触发，比如当对一个表进行操作（ insert，delete， update）时就会激活它执行。触发器经常用于加强数据的完整性约束和业务规则等。 触发器可以从 DBA_TRIGGERS ，USER_TRIGGERS 数据字典中查到。SQL3的触发器是一个能由系统自动执行对数据库修改的语句。</p>
<p>触发器可以查询其他表，而且可以包含复杂的SQL语句。它们主要用于强制服从复杂的业务规则或要求。例如：您可以根据客户当前的帐户状态，控制是否允许插入新订单。</p>
<p>触发器也可用于强制引用完整性，以便在多个表中添加、更新或删除行时，保留在这些表之间所定义的关系。然而，强制引用完整性的最好方法是在相关表中定义主键和外键约束。如果使用数据库关系图，则可以在表之间创建关系以自动创建外键约束。</p>
<p>触发器与存储过程的唯一区别是触发器不能执行EXECUTE语句调用，而是在用户执行Transact-SQL语句时自动触发执行。</p>
<p>此外触发器是逻辑电路的基本单元电路，具有记忆功能，可用于二进制数据储存，记忆信息等。</p>
<p><strong>语法</strong> </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create trigger 触发器名称 [触发时机(before|after)] [触发动作(update|insert|delete)] on [数据表名] for each row<br>begin<br>  [触发后执行的事件]<br>end;<br><br></code></pre></td></tr></tbody></table></figure>



<h4 id="1、设置插入时触发器"><a href="#1、设置插入时触发器" class="headerlink" title="1、设置插入时触发器"></a>1、设置插入时触发器</h4><p>为 test 表 设置插入时的触发器，当test 表每次新插入一条记录时统计一下记录的总数并赋值给 @count_1</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create trigger trig_1 after insert on test for each row<br>begin<br>  select count(*) into @count_1 from test;<br>end;<br>insert into test values("小刚","男",2); -- 插入一条记录，用于触发触发器<br>select @count_1; -- 查看用户变量 @count_1 的值<br><br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、设置删除时触发器"><a href="#2、设置删除时触发器" class="headerlink" title="2、设置删除时触发器"></a>2、设置删除时触发器</h4><p>为 test 表 设置删除时的触发器，当test 表每次删除一条记录时统计一下记录的总数并赋值给 @count_2</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create trigger trig_2 after delete on test for each row<br>begin<br>  select count(*) into @count_2 from test;<br>end;<br>delete from test where id = 2; -- 删除一条记录，用于触发触发器<br>select @count_2;  -- 查看用户变量 @count_2 的值<br><br></code></pre></td></tr></tbody></table></figure>

<p>3、设置修改时触发器</p>
<p>为 test 表 设置删除时的触发器，当test 表每次修改一条记录时统计一下记录的总数并赋值给 @count_3</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create trigger trig_3 after update on test for each row<br>begin<br>  select count(*) into @count_3 from test;<br>end;<br>update test set sname = "小刚" where id = 1;  -- 更新一条记录，用于触发触发器<br>select @count_3;  -- 查看用户变量 @count_3 的值<br><br></code></pre></td></tr></tbody></table></figure>

<p>4、查看指定触发器</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show create trigger trig_1;  -- trig_1 为触发器名称<br><br></code></pre></td></tr></tbody></table></figure>

<p>5、查看所有的触发器</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">show triggers;<br><br></code></pre></td></tr></tbody></table></figure>

<p>6、删除触发器</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">drop trigger trig_3;<br><br></code></pre></td></tr></tbody></table></figure>

<h3 id="五、流程控制"><a href="#五、流程控制" class="headerlink" title="五、流程控制"></a>五、流程控制</h3><p>流程控制可以用于，函数、存储过程、触发器等，这里我都用函数来举例。</p>
<h4 id="1、if-判断语句"><a href="#1、if-判断语句" class="headerlink" title="1、if  判断语句"></a>1、if  判断语句</h4><p><strong>语法</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">if 表达式 then<br>  执行体;<br>elseif 表达式 then<br>  执行体;<br>else <br>  执行体;<br>end if;<br><br></code></pre></td></tr></tbody></table></figure>

<p>创建一个函数max_min ，可以接收两个参数并返回两数之间的大小关系</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create function max_min(a int,b int)<br>returns varchar(30)<br>begin<br>  if a &gt; b then  -- 需要 then 然后开始要执行的语句<br>    return concat(a,"大于",b);<br>  elseif a = b then<br>    return concat(a,"等于",b);<br>  else  -- 这个不需要then <br>    return concat(a,"小于",b);<br>  end if;  -- 结束if 语句<br>end;<br>select max_min(1,2),max_min(2,2),max_min(3,2);  -- 验证一下<br><br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、case-语句"><a href="#2、case-语句" class="headerlink" title="2、case 语句"></a>2、case 语句</h4><p><strong>语法</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">case 表达式    /*方法一*/     case         /* 方法二*/<br>when 值 then                 when 表达式 then <br>  执行体;                      执行体;<br>when 值 then                 when 表达式 then <br>  执行体;                      执行体;<br>else                         else<br>  执行体;                      执行体;<br>end case;                    end case;<br><br></code></pre></td></tr></tbody></table></figure>

<p>创建一个函数max_min_case ，可以接收两个参数并返回两数之间的大小关系</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">-- 这里用了方法二<br>create function max_min_case(a int,b int)<br>returns varchar(30)<br>begin<br>  case<br>  when a &gt; b then<br>    return concat(a,"大于",b);<br>  when a = b then<br>    return concat(a,"等于",b);<br>  else<br>    return concat(a,"小于",b);<br>  end case;<br>end;<br>select max_min_case(1,2),max_min_case(2,2),max_min_case(3,2);  -- 验证一下<br><br></code></pre></td></tr></tbody></table></figure>

<h4 id="3、while-循化语句"><a href="#3、while-循化语句" class="headerlink" title="3、while 循化语句"></a>3、while 循化语句</h4><p><strong>语法</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">while 表达式 do<br>  执行体;<br>end while;<br><br></code></pre></td></tr></tbody></table></figure>

<p>创建一个函数 func_while ，实现 1+3+5+…+99 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create function func_while()<br>returns int<br>begin<br>  declare num int default 1;<br>  declare n int default 3;<br>  while n &lt; 100 do   <br>    set num = num + n;  -- 要用 set 来创建每一次的赋值<br>    set n = n + 2;<br>  end while;<br>return num;  -- 返回num 值<br>end;<br>select func_while();  -- 使用一下<br><br></code></pre></td></tr></tbody></table></figure>

<h4 id="4、repeat-循环语句"><a href="#4、repeat-循环语句" class="headerlink" title="4、repeat 循环语句"></a>4、repeat 循环语句</h4><p>repeat 循化 类似于 java 里的 do{ }while() ,就是先执行一个，再去判断 until 条件，当 until 条件为真时结束循化，条件为假时，继续循环。</p>
<p><strong>语法</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">repeat<br>  执行体;<br>  until 条件; <br>end repeat;<br><br></code></pre></td></tr></tbody></table></figure>

<p>创建一个函数 func_repeat ，实现 2+4+6+…100</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create function func_repeat()<br>returns int<br>begin<br>  declare num int default 2;<br>  declare n int default 4;<br>  repeat<br>    set num = num + n;<br>    set n = n + 2;<br>    until n &gt; 100  -- 这里不用 ;<br>  end repeat;<br>return num;<br>end;<br>select func_repeat() -- 使用验证一下<br><br></code></pre></td></tr></tbody></table></figure>

<h4 id="5、loop-循环语句"><a href="#5、loop-循环语句" class="headerlink" title="5、loop 循环语句"></a>5、loop 循环语句</h4><p>扩展知识</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">leave ：类似与 python 的 <span class="hljs-keyword">break</span>,即：结束循环<br>iterate : 类似 python 的 <span class="hljs-keyword">continue</span> 即：结束<span class="hljs-keyword">continue</span> 后的循环体后继续重新循环<br><br></code></pre></td></tr></tbody></table></figure>

<p>loop 没有内置循环条件，即：没有结束循环的条件，但可以用 leave 来结束循环。</p>
<p><strong>语法</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">startloop:loop  -- startloop 是自定义的一个词，用来做标志的<br>  循环体;<br>  if 表达式 then<br>    levae startloop;  -- 自定义的结束循环<br>  end if;<br>end loop;<br><br></code></pre></td></tr></tbody></table></figure>

<p> 创建一个函数 func_loop ，实现 1+3+5+…+99 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs mysql">create function func_loop()<br>returns int<br>begin<br>  declare num int default 1;<br>  declare n int default 3;<br>  startloop:loop<br>    set num = num + n;<br>    set n = n + 2;<br>    if n &gt; 100 then<br>      leave startloop;<br>  end if;<br>  end loop;<br>return num;<br>end;<br>select func_loop(); -- 使用验证一下<br><br></code></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL数据库基础(四) 简单查询</title>
    <url>/2022/05/26/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E5%9B%9B-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%B8%80-%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、简单查询"><a href="#一、简单查询" class="headerlink" title="一、简单查询"></a>一、简单查询</h3><h4 id="1、查询student-数据表所有数据"><a href="#1、查询student-数据表所有数据" class="headerlink" title="1、查询student 数据表所有数据"></a>1、查询student 数据表所有数据</h4><p>表：student</p>
<p>字段：* (所有)</p>
<p>条件：无</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、查询student-表的-指定字段数据"><a href="#2、查询student-表的-指定字段数据" class="headerlink" title="2、查询student 表的 指定字段数据"></a>2、查询student 表的 指定字段数据</h4><p>表：student</p>
<p>字段：sno (学号)、sname(姓名)、ssex(性别)</p>
<p>条件：无</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select sno,sname,ssex from student;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="3、查询student-表的-指定字段数据-并改列名显示-as"><a href="#3、查询student-表的-指定字段数据-并改列名显示-as" class="headerlink" title="3、查询student 表的 指定字段数据   并改列名显示 (as)"></a>3、查询student 表的 指定字段数据   并改列名显示 (as)</h4><p>表：student</p>
<p>字段：sno (学号)、sname(姓名)、ssex(性别)</p>
<p>条件：[sno  改为  学号 ]、[sname  改为 姓名 ]、[ssex 改为 性别 ]</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select sno as 学号,sname as 姓名,ssex as 性别 from student;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="4、查询sc-表-打折-数学运算"><a href="#4、查询sc-表-打折-数学运算" class="headerlink" title="4、查询sc 表  打折(数学运算)"></a>4、查询sc 表  打折(数学运算)</h4><p>表：sc</p>
<p>字段：sno(学号)、degree(成绩)</p>
<p>条件：成绩打八折</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select sno,degree*0.8 from sc;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="5、查询student-表-指定条件-where"><a href="#5、查询student-表-指定条件-where" class="headerlink" title="5、查询student 表 指定条件(where)"></a>5、查询student 表 指定条件(where)</h4><p>表：student</p>
<p>字段：sno (学号)、sname(姓名)、ssex(性别)</p>
<p>条件：ssex 字段数据为 “男”</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select sno,sname,ssex from student where ssex = "男";<br></code></pre></td></tr></tbody></table></figure>

<h4 id="6、查询sc-表-取区间-between-and-、-not-between-and"><a href="#6、查询sc-表-取区间-between-and-、-not-between-and" class="headerlink" title="6、查询sc 表  取区间[(between  and)、(not between and)]"></a>6、查询sc 表  取区间[(between  and)、(not between and)]</h4><p>表：sc</p>
<p>字段：* (所有)、degree(成绩)</p>
<p>条件：只要查询 degree(成绩) 在80~90 的 所有数据(between  and)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc where degree between 80 and 90;<br></code></pre></td></tr></tbody></table></figure>

<p>条件：只要查询 degree(成绩) 不在80~90 的 所有数据(not between and)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc where degree not between 80 and 90;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="7、查询sc-表-取集合-in-、-not-in-、-or"><a href="#7、查询sc-表-取集合-in-、-not-in-、-or" class="headerlink" title="7、查询sc 表  取集合[(in)、(not in)、(or)]"></a>7、查询sc 表  取集合[(in)、(not in)、(or)]</h4><p>表：sc</p>
<p>字段：* (所有)、degree(成绩)</p>
<p>条件：只要查询 degree(成绩) 为 {92、85、90} 的数据(in)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc where degree in (92,85,90);<br></code></pre></td></tr></tbody></table></figure>

<p>条件：只要查询 degree(成绩) 不为 {92、85、90}的 数据(not in)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc where degree not in (92,85,90);<br></code></pre></td></tr></tbody></table></figure>

<p>条件：只要查询 degree(成绩) 为 90 或 85 的 数据(in or)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from sc where degree in (90) or degree in (85);<br></code></pre></td></tr></tbody></table></figure>

<h4 id="8、查询student-表-空值-null"><a href="#8、查询student-表-空值-null" class="headerlink" title="8、查询student 表  空值(null)"></a>8、查询student 表  空值(null)</h4><p>表：student</p>
<p>字段：classno (班级号)</p>
<p>条件：查看 classno 字段   为空值的行(is)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student where classno is null;<br></code></pre></td></tr></tbody></table></figure>

<p>条件：查看 classno 字段   不为空值的行(not is)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student where classno is not null;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="9、查询student-表-只取-前两条-limit"><a href="#9、查询student-表-只取-前两条-limit" class="headerlink" title="9、查询student 表  只取 前两条(limit)"></a>9、查询student 表  只取 前两条(limit)</h4><p>表：student</p>
<p>字段：* (所有)</p>
<p>条件：只要查询到的 前两条</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student limit 2;<br>select * from student limit 0,2;<br></code></pre></td></tr></tbody></table></figure>

<h3 id="二、简单查询-模糊查询"><a href="#二、简单查询-模糊查询" class="headerlink" title="二、简单查询(模糊查询)"></a>二、简单查询(模糊查询)</h3><h4 id="1、查询student-表-查询姓刘的学生-like"><a href="#1、查询student-表-查询姓刘的学生-like" class="headerlink" title="1、查询student 表  查询姓刘的学生(like)"></a>1、查询student 表  查询姓刘的学生(like)</h4><ol>
<li>模糊查询：escape “#”  把 “#”  用于转义字符的字符 </li>
<li><pre><code>                     --&gt; % 匹配任意多个字符 
</code></pre>
</li>
<li><pre><code>                     --&gt; _  匹配单个任意字符
</code></pre>
</li>
</ol>
<p>表：student</p>
<p>字段：* (所有)、sname(姓名)、sdept(学院)</p>
<p>条件：只要查询sname(姓名)   姓刘 的信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student where sname like "刘%";<br></code></pre></td></tr></tbody></table></figure>

<p>条件：只要查询sname(姓名)   姓刘   单名   的信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student where sname like "刘_";<br></code></pre></td></tr></tbody></table></figure>

<p>条件：只要查询sdept(学院) 为 “计算机_”  开始   的信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student where sdept like "计算机#_%" escape "#";<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、查询student-表-查询姓刘的学生-regexp"><a href="#2、查询student-表-查询姓刘的学生-regexp" class="headerlink" title="2、查询student 表  查询姓刘的学生(regexp)"></a>2、查询student 表  查询姓刘的学生(regexp)</h4><p>正则表达式：regexp   </p>
<p>表：student</p>
<p>字段：* (所有)、sname(姓名)、sdept(学院)</p>
<p>条件：只要查询sdept(学院) 为 “计算机_”  开始   的信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select * from student where sdept regexp "^计算机_.";<br></code></pre></td></tr></tbody></table></figure>

<h3 id="三、简单查询-引入函数"><a href="#三、简单查询-引入函数" class="headerlink" title="三、简单查询 (引入函数)"></a>三、简单查询 (引入函数)</h3><h4 id="1、查询student-表-学生年龄-year-、current-date"><a href="#1、查询student-表-学生年龄-year-、current-date" class="headerlink" title="1、查询student 表  学生年龄 [ year()、current_date()]"></a>1、查询student 表  学生年龄 [ year()、current_date()]</h4><ol>
<li>函数：1、year()  取出年份</li>
<li><pre><code>       2、current_date()  现在的日期
</code></pre>
</li>
</ol>
<p>表：student</p>
<p>字段：sno (学号)、sname(姓名)、ssex(性别)、sbirthday(出生日期)</p>
<p>条件：用函数处理 sbirthday 字段 ，拿到年龄</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select sno as 学号,sname as 姓名,ssex as 性别,year(current_date())-year(sbirthday) as 年龄 from student;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、查询student-表-去重复-distinct"><a href="#2、查询student-表-去重复-distinct" class="headerlink" title="2、查询student 表  去重复 (distinct)"></a>2、查询student 表  去重复 (distinct)</h4><p>函数：1、distinct 去除重复值</p>
<p>表：student</p>
<p>字段：ssex(性别)、</p>
<p>条件：用函数处理 ssex字段 ，拿到所拥有的性别</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select distinct(ssex) from student;<br></code></pre></td></tr></tbody></table></figure>

<h4 id="3、查询sc-表-数学函数、"><a href="#3、查询sc-表-数学函数、" class="headerlink" title="3、查询sc 表  数学函数、"></a>3、查询sc 表  数学函数、</h4><ol>
<li>函数： 1、max() 提取最大值</li>
<li><pre><code>        2、min() 最小值
</code></pre>
</li>
<li><pre><code>        3、avg() 平均值
</code></pre>
</li>
<li><pre><code>        4、count() 统计行数
</code></pre>
</li>
</ol>
<p>表：sc</p>
<p>字段：degree(成绩) </p>
<p>条件：查询degree 最大值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select max(degree) from sc;<br></code></pre></td></tr></tbody></table></figure>

<p>条件：查询degree 最小值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select min(degree) from sc;<br></code></pre></td></tr></tbody></table></figure>

<p>条件：查询degree 平均值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select avg(degree) from sc;<br></code></pre></td></tr></tbody></table></figure>

<p>条件：查询degree 总行数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">select count(degree) from sc;<br></code></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>简单查询</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/2022/07/14/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="32d067b52af4b9cd889d16aa2186ac7a8d4c9f9f7b60d2fe4273632c62f57273">905c4d0cf8e39f3f4fbbf98d9acd6e655bed925345883a3fc5617c3319f3afd3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">努力学习</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>XSS跨站脚本攻击</title>
    <url>/2022/07/14/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6c7f3b9f9cdf06a082ff58c49a9f512e4a151a920f11363711d61a83ef5d65d5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">努力学习</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>web安全</category>
        <category>XSS跨站脚本攻击</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之format</title>
    <url>/2022/05/22/python%E5%9F%BA%E7%A1%80%E4%B9%8Bformat/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、无参数"><a href="#一、无参数" class="headerlink" title="一、无参数"></a>一、无参数</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"{} {} {}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"hello"</span>,<span class="hljs-string">"world"</span>,<span class="hljs-string">"!"</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong> hello world !</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"{0} {1} {2}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"hello"</span>,<span class="hljs-string">"world"</span>,<span class="hljs-string">"!"</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong> hello world !</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"{id} {name} {age}岁"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>=<span class="hljs-string">"20200"</span>,<span class="hljs-string">"Tom"</span>,<span class="hljs-string">"16"</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong> 20200 Tom 16岁</p>
<h3 id="二、列表、字典、类"><a href="#二、列表、字典、类" class="headerlink" title="二、列表、字典、类"></a>二、列表、字典、类</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">"hello"</span>,<span class="hljs-string">"world"</span>,<span class="hljs-string">"!"</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{list[0]} {list[1]} {list[2]}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">list</span>=<span class="hljs-built_in">list</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong> hello world !</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = {<span class="hljs-string">"id"</span>  :<span class="hljs-string">"20200"</span>,<br>        <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>        <span class="hljs-string">"age"</span> :<span class="hljs-string">"16"</span>}<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{id} {name} {age}岁"</span>.<span class="hljs-built_in">format</span>(**<span class="hljs-built_in">dict</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong> 20200 xiaoming 16岁</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user</span>():<br>    <span class="hljs-built_in">id</span> = <span class="hljs-string">"20200"</span><br>    name = <span class="hljs-string">"xiaoming"</span><br>    age = <span class="hljs-string">"16"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{user.id} {user.name} {age}岁"</span>.<span class="hljs-built_in">format</span>(user=user))<br></code></pre></td></tr></tbody></table></figure>

<p> <strong>&gt;&gt;&gt;</strong>  20200 xiaoming 16岁</p>
<h3 id="三、魔法参数"><a href="#三、魔法参数" class="headerlink" title="三、魔法参数"></a>三、魔法参数</h3><p>*args       表示任何多个无名参数，它是一个tuple or list；</p>
<p>**kwargs  表示关键字参数，它是一个 dict。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">"--&gt;"</span>,<span class="hljs-string">"&lt;--"</span>]<br><span class="hljs-built_in">dict</span> = {<span class="hljs-string">"a"</span>:<span class="hljs-string">"hello"</span>,<br>        <span class="hljs-string">"b"</span>:<span class="hljs-string">"world"</span>,<br>        <span class="hljs-string">"c"</span>:<span class="hljs-string">"!"</span><br>       }<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{a} {} {b} {} {c}"</span>.<span class="hljs-built_in">format</span>(*<span class="hljs-built_in">list</span>,**<span class="hljs-built_in">dict</span>))<br>    <br></code></pre></td></tr></tbody></table></figure>

<p> <strong>&gt;&gt;&gt;</strong>  hello –&gt; world &lt;– !</p>
<h3 id="四、数字格式化"><a href="#四、数字格式化" class="headerlink" title="四、数字格式化"></a>四、数字格式化</h3><h4 id="1、小数保留"><a href="#1、小数保留" class="headerlink" title="1、小数保留"></a>1、小数保留</h4><table>
<thead>
<tr>
<th>数字</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1.23456</td>
<td>“{:2f}”</td>
<td>1.23</td>
<td>保留小数点后两位</td>
</tr>
<tr>
<td>1.23456</td>
<td>“{:+.2f}”</td>
<td>+1.23</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>-1.2345</td>
<td>“{:+.2f}”</td>
<td>-1.23</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>1.23456</td>
<td>“{:.0f}”</td>
<td>1</td>
<td>不带小数</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1.23456</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:.2f}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:+.2f}"</span>.<span class="hljs-built_in">format</span>(a))<br>b = -<span class="hljs-number">1.2345</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:+.2f}"</span>.<span class="hljs-built_in">format</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:.0f}"</span>.<span class="hljs-built_in">format</span>(a))<br></code></pre></td></tr></tbody></table></figure>

<p> <strong>&gt;&gt;&gt;</strong>   1.23<br> <strong>&gt;&gt;&gt;</strong>   +1.23<br> <strong>&gt;&gt;&gt;</strong>   -1.23<br> <strong>&gt;&gt;&gt;</strong>   1</p>
<h4 id="2、填充"><a href="#2、填充" class="headerlink" title="2、填充"></a>2、填充</h4><p><u>0 的位置也可为其他字符 (不填默认空格填充)</u></p>
<table>
<thead>
<tr>
<th>输入</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>123</td>
<td>“{:0&gt;6d}”</td>
<td>000123</td>
<td>用 0 填充左边，宽度为6</td>
</tr>
<tr>
<td>123</td>
<td>“{:0&lt;6d}”</td>
<td>123000</td>
<td>用 0 填充右边，宽度为6</td>
</tr>
<tr>
<td>123</td>
<td>“{:0^6d}”</td>
<td>012300</td>
<td>用 0 填充居中，宽度为6</td>
</tr>
<tr>
<td>“你好”</td>
<td>“{:-&gt;6}”</td>
<td>—-你好</td>
<td>当处理字符串时时，去掉 d  。</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:0&gt;6d}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:0&lt;6d}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:0^6d}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:-&gt;6}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"你好"</span>))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong> 000123<br><strong>&gt;&gt;&gt;</strong> 123000<br><strong>&gt;&gt;&gt;</strong> 012300<br><strong>&gt;&gt;&gt;</strong> —-你好</p>
<h4 id="3、逗号、百分比、指数"><a href="#3、逗号、百分比、指数" class="headerlink" title="3、逗号、百分比、指数"></a>3、逗号、百分比、指数</h4><table>
<thead>
<tr>
<th>输入</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>100000</td>
<td>“{:,}”</td>
<td>100,000</td>
<td>以逗号分隔的数字格式</td>
</tr>
<tr>
<td>100000</td>
<td>“{:.2e}”</td>
<td>1.00e+05</td>
<td>指数记法</td>
</tr>
<tr>
<td>0.13</td>
<td>“{:.2%}”</td>
<td>13%</td>
<td>百分比格式</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:,}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:.2e}"</span>.<span class="hljs-built_in">format</span>(a))<br>b = <span class="hljs-number">0.13</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:.2%}"</span>.<span class="hljs-built_in">format</span>(b))<br><br></code></pre></td></tr></tbody></table></figure>

<p>  <strong>&gt;&gt;&gt;</strong>   100,000<br>  <strong>&gt;&gt;&gt;</strong>   1.00e+05<br>  <strong>&gt;&gt;&gt;</strong>   13.00%</p>
<h4 id="4、进制"><a href="#4、进制" class="headerlink" title="4、进制"></a>4、进制</h4><table>
<thead>
<tr>
<th>输入</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>123</td>
<td>“{:b}”</td>
<td>1111011</td>
<td>二进制</td>
</tr>
<tr>
<td>123</td>
<td>“{:d}”</td>
<td>123</td>
<td>十进制</td>
</tr>
<tr>
<td>123</td>
<td>“{:o}”</td>
<td>173</td>
<td>八进制</td>
</tr>
<tr>
<td>123</td>
<td>“{:x}”</td>
<td>7b</td>
<td>十六进制</td>
</tr>
<tr>
<td>123</td>
<td>“{:#x}”</td>
<td>0x7b</td>
<td>0x式十六进制 字母小写</td>
</tr>
<tr>
<td>123</td>
<td>“{:#X}”</td>
<td>0X7B</td>
<td>0x式十六进制 字母大写</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:b}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:d}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:o}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:x}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:#x}"</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{:#X}"</span>.<span class="hljs-built_in">format</span>(a))<br><br></code></pre></td></tr></tbody></table></figure>

<p>  <strong>&gt;&gt;&gt;</strong>   1111011<br>  <strong>&gt;&gt;&gt;</strong>   123<br>  <strong>&gt;&gt;&gt;</strong>   173<br>  <strong>&gt;&gt;&gt;</strong>   7b<br>  <strong>&gt;&gt;&gt;</strong>   0x7b<br>  <strong>&gt;&gt;&gt;</strong>   0X7B</p>
<h3 id="五、叹号用法"><a href="#五、叹号用法" class="headerlink" title="五、叹号用法"></a>五、叹号用法</h3><p>！后面可以加s r a 分别对应str() repr() ascii() 作用是在填充前先用对应的函数来处理参数<br>差别就是<br>str()是面向用户的，目的是可读性，<br>repr()带有引号，<br>ascii()是面向Python解析器的，返回值表示在python内部的含义,ascii (),返回ascii编码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"{!s}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"你"</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{!r}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"你"</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"{!a}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"你"</span>))<br><br></code></pre></td></tr></tbody></table></figure>

<p>  <strong>&gt;&gt;&gt;</strong>   你<br>  <strong>&gt;&gt;&gt;</strong>   ‘你’<br>  <strong>&gt;&gt;&gt;</strong>   ‘\u4f60’</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>format</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之字符串操作</title>
    <url>/2022/06/28/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、统一英文大小写"><a href="#一、统一英文大小写" class="headerlink" title="一、统一英文大小写"></a>一、统一英文大小写</h3><p>1、统一英文大写  <strong>upper()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"ABcDefg"</span><br><span class="hljs-built_in">print</span>(a.upper())<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  ABCDEFG</p>
<p>2、统一英文小写  <strong>lower()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"ABcDefg"</span><br><span class="hljs-built_in">print</span>(a.lower())<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  abcdefg</p>
<h3 id="二、去除字符串首尾空格"><a href="#二、去除字符串首尾空格" class="headerlink" title="二、去除字符串首尾空格"></a>二、去除字符串首尾空格</h3><p>1、去除字符串开头空格  <strong>lstrip()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"   hello world!   "</span><br><span class="hljs-built_in">print</span>(a.lstrip())<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  hello world!   </p>
<p>2、去除字符串末尾空格  <strong>rstrip()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"   hello world!   "</span><br><span class="hljs-built_in">print</span>(a.rstrip())<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>     hello world!</p>
<p>3、去除字符串首位空格  <strong>strip()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"   hello world!   "</span><br><span class="hljs-built_in">print</span>(a.strip())<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  hello world!</p>
<h3 id="三、拆分字符串-split"><a href="#三、拆分字符串-split" class="headerlink" title="三、拆分字符串  split()"></a>三、拆分字符串  split()</h3><p>把字符串 a 以   ,   分割返回列表</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"hello,world,!"</span><br><span class="hljs-built_in">print</span>(a.split(<span class="hljs-string">","</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  [‘hello’, ‘world’, ‘!’]</p>
<h3 id="四、查找子串的位置-find"><a href="#四、查找子串的位置-find" class="headerlink" title="四、查找子串的位置  find()"></a>四、查找子串的位置  find()</h3><p>说明：find() 函数如果字符串中有所查的子串 返回子串位置 ，否则返回 -1</p>
<p>1、查找 “world”  在字符串 a 中的位置</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"hello world!"</span><br><span class="hljs-built_in">print</span>(a.find(<span class="hljs-string">"world"</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  6</p>
<p>2、查找 “xiaoming”  在字符串 a 中的位置</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"hello world!"</span><br><span class="hljs-built_in">print</span>(a.find(<span class="hljs-string">"xiaoming"</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  -1</p>
<h3 id="五、截取字符串"><a href="#五、截取字符串" class="headerlink" title="五、截取字符串 [:::]"></a>五、截取字符串 [:::]</h3><p>说明： string[起始索引:结尾索引:步涨]</p>
<p>1、截取字符串  的 前3 位字符 </p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"0123456789"</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong> 012</p>
<p>2、截取字符串 的 后3 位字符</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"0123456789"</span><br><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">3</span>::])  <span class="hljs-comment"># : 截取全部字符</span><br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  789</p>
<p>3、截取字符串中位置 为 奇数 的字符</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"0123456789"</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>])  <span class="hljs-comment"># : 截取全部字符</span><br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  13579</p>
<p>4、截取字符串中位置 为 偶数 的字符</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"0123456789"</span><br><span class="hljs-built_in">print</span>(a[::<span class="hljs-number">2</span>])  <span class="hljs-comment">#不设置初始值 默认为0</span><br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  02468</p>
<p>5、将字符串倒序截取输出</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"0123456789"</span><br><span class="hljs-built_in">print</span>(a[::-<span class="hljs-number">1</span>]) <span class="hljs-comment">#截取全部字符串 步涨值为-1</span><br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  9876543210</p>
<h3 id="六、字符串替换-replace"><a href="#六、字符串替换-replace" class="headerlink" title="六、字符串替换 replace()"></a>六、字符串替换 replace()</h3><p>说明：replace(要替换的字符串,替换后的字符串)</p>
<p>把 a 字符串 中的 “HELLO” 替换为 “hello”</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"HELLO world!"</span><br><span class="hljs-built_in">print</span>(a.replace(<span class="hljs-string">"HELLO"</span>,<span class="hljs-string">"hello"</span>))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  hello world!</p>
<h3 id="七、获取字符串的长度-len"><a href="#七、获取字符串的长度-len" class="headerlink" title="七、获取字符串的长度 len()"></a>七、获取字符串的长度 len()</h3><p>返回 a 字符串的长度</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"hello world!"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  12</p>
<h3 id="八、使字符串居中显示-center"><a href="#八、使字符串居中显示-center" class="headerlink" title="八、使字符串居中显示   center()"></a>八、使字符串居中显示   center()</h3><p>说明：center(width,filechar)  </p>
<p>width 字符串排版总宽   </p>
<p>filechar 为填充字符</p>
<p>1、将 “12321” 在 7个字符宽度里居中显示</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"12321"</span><br><span class="hljs-built_in">print</span>(a.center(<span class="hljs-number">7</span>))<br><br></code></pre></td></tr></tbody></table></figure>

<p> <strong>&gt;&gt;&gt;</strong>   12321 </p>
<p>2、将 “12321” 在 7个字符宽度里居中显示,并用  *  填充</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"12321"</span><br><span class="hljs-built_in">print</span>(a.center(<span class="hljs-number">7</span>,<span class="hljs-string">"*"</span>))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  *12321*</p>
<h3 id="九、统计子字符串出现次数-count"><a href="#九、统计子字符串出现次数-count" class="headerlink" title="九、统计子字符串出现次数  count()"></a>九、统计子字符串出现次数  count()</h3><p>说明：count(sub,start=0,end(string))</p>
<p>sub：搜索的子字符串 </p>
<p>start：字符串搜索开始位置，默认为第一个位置</p>
<p>end：字符串搜索结束位置，默认为最后一个位置</p>
<p>1、统计字符串中 “ab” 出现的次数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"abababcdababab"</span><br><span class="hljs-built_in">print</span>(a.count(<span class="hljs-string">"ab"</span>))<br><br></code></pre></td></tr></tbody></table></figure>

<p> <strong>&gt;&gt;&gt;</strong>  6</p>
<p>2、统计字符串从位置为 3~9 之间中 “ab” 出现的次数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"abababcdababab"</span><br><span class="hljs-built_in">print</span>(a.count(<span class="hljs-string">"ab"</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  1</p>
<h3 id="十、新字符串生成-join"><a href="#十、新字符串生成-join" class="headerlink" title="十、新字符串生成  join()"></a>十、新字符串生成  join()</h3><p>1、将一个字符串 在每个字符中间加入 -   返回一个新字符串</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"abcdefg"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"-"</span>.join(a))<br><br></code></pre></td></tr></tbody></table></figure>

<p>  <strong>&gt;&gt;&gt;</strong>  a-b-c-d-e-f-g</p>
<p>2、将一个列表中的每个字符连接在一起输出</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">""</span>.join(a))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  abc</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>字符串操作</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之常用数据结构</title>
    <url>/2022/06/28/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、列表list（有序）增、删、改、查"><a href="#一、列表list（有序）增、删、改、查" class="headerlink" title="一、列表list（有序）增、删、改、查"></a>一、列表list（有序）增、删、改、查</h3><h4 id="1、在列表增加元素-append"><a href="#1、在列表增加元素-append" class="headerlink" title="1、在列表增加元素  append()"></a>1、在列表增加元素  <strong>append()</strong></h4><p>​      创建一个空列表，增加元素 name 、age</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = []<br>a.append(<span class="hljs-string">"name"</span>)<br>a.append(<span class="hljs-string">"age"</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  [‘name’, ‘age’]</p>
<p>​        在 a 列表中指定位置 1 插入  sex <strong>insert()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'age'</span>]<br>a.insert(<span class="hljs-number">1</span>,<span class="hljs-string">"sex"</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  [‘name’, ‘sex’, ‘age’]</p>
<h4 id="2、删除-元素pop"><a href="#2、删除-元素pop" class="headerlink" title="2、删除 元素pop()"></a>2、删除 元素<strong>pop()</strong></h4><p>1、列表 a 第一个元素和最后一个元素 </p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>]<br>a.pop(<span class="hljs-number">0</span>)<br>a.pop()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  [‘age’]</p>
<p>2、删除列表中索引为 1 的元素 <strong>del list[index]</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>]<br><span class="hljs-keyword">del</span> a[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  [‘name’, ‘sex’]</p>
<h4 id="3、修改元素"><a href="#3、修改元素" class="headerlink" title="3、修改元素"></a>3、修改元素</h4><p>1、把列表 a 中 第一个位置元素改为 “sno” </p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>]<br>a[<span class="hljs-number">1</span>] = <span class="hljs-string">"sno"</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  [‘name’, ‘sno’, ‘sex’]</p>
<h4 id="4、查询-a-列表的元素-list-index"><a href="#4、查询-a-列表的元素-list-index" class="headerlink" title="4、查询 a 列表的元素 list[index]"></a>4、查询 a 列表的元素 <strong>list[index]</strong></h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>]<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  name</p>
<p>​      遍历列表 a 所有元素 <strong>for in</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">" "</span>)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  name age sex </p>
<h3 id="二、元组-tuple-有序-查、解包"><a href="#二、元组-tuple-有序-查、解包" class="headerlink" title="二、元组  tuple  (有序 )  查、解包"></a>二、元组  tuple  (有序 )  查、解包</h3><p><strong>元组元素不可改变</strong></p>
<h4 id="1、创建元组"><a href="#1、创建元组" class="headerlink" title="1、创建元组"></a>1、创建元组</h4><p>创建一个元组，并写入 name、age、sex</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,sex)<br></code></pre></td></tr></tbody></table></figure>

<h4 id="2、查询元组"><a href="#2、查询元组" class="headerlink" title="2、查询元组"></a>2、查询元组</h4><p>1、查询元组 a 和只查询 第一个元素</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  (‘name’, ‘age’, ‘sex’)<br><strong>&gt;&gt;&gt;</strong>  name</p>
<p>2、遍历所有元素</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>	<span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">" "</span>)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  name age sex </p>
<h4 id="3、元组解包"><a href="#3、元组解包" class="headerlink" title="3、元组解包"></a>3、元组解包</h4><p>把元组 a 解包</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>)<br>b,c,d = a<br><span class="hljs-built_in">print</span>(b,c,d)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  name age sex</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-string">"name"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"sex"</span>)<br>b,*c = a<br><span class="hljs-built_in">print</span>(b,c)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  name [‘age’, ‘sex’]</p>
<h3 id="三、字典-dict-无序-增、删、改、查"><a href="#三、字典-dict-无序-增、删、改、查" class="headerlink" title="三、字典  dict  (无序) 增、删、改、查"></a>三、字典  dict  (无序) 增、删、改、查</h3><p><strong>键不重复，唯一</strong></p>
<p><strong>创建一个空字典  a = {}</strong></p>
<h4 id="1、创建字典"><a href="#1、创建字典" class="headerlink" title="1、创建字典"></a>1、创建字典</h4><p>1、创建在字典 a 中增加 元素 “name”:”xiaoming”  “age”:18</p>
<p>(1)</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {}<br>a[<span class="hljs-string">"name"</span>] = <span class="hljs-string">"xiaoming"</span><br>a[<span class="hljs-string">"age"</span>]  = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p>(2)</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">"xiaoming"</span>,age=<span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  {‘name’: ‘xiaoming’, ‘age’: 18}</p>
<h4 id="2、删除字典-pop-key-d"><a href="#2、删除字典-pop-key-d" class="headerlink" title="2、删除字典  pop(key,d)"></a>2、删除字典  <strong>pop(key,d)</strong></h4><p>删除字典 a 中的元素 “age”:18</p>
<p>说明：pop(key,d) key：删除的 键  d：没有对应的键返回 d</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br>a.pop(<span class="hljs-string">"age"</span>,<span class="hljs-string">"d"</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  {‘name’: ‘xiaoming’}</p>
<p>删除字典 a 所有元素  <strong>clear()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br>a.clear()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  {}</p>
<h4 id="3、修改字典元素"><a href="#3、修改字典元素" class="headerlink" title="3、修改字典元素"></a>3、修改字典元素</h4><p>把字典 a 的 “name” 键 的值 修改为 “小明”</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br>a[<span class="hljs-string">"name"</span>] = <span class="hljs-string">"小明"</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  {‘name’: ‘小明’, ‘age’: 18}</p>
<h4 id="4、查询字典"><a href="#4、查询字典" class="headerlink" title="4、查询字典"></a>4、查询字典</h4><p>说明：get(key,”d”) 若字典d 中没有key键 则返回 “d” </p>
<p>1、获取字段 a 的 “name” 键的值  <strong>get()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br>b = a.get(<span class="hljs-string">"name"</span>,<span class="hljs-string">"d"</span>)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br>b = a[<span class="hljs-string">"name"</span>]<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></tbody></table></figure>



<p><strong>&gt;&gt;&gt;</strong>  xiaoming</p>
<p>2、遍历字典 a 所有的<strong>键</strong> <strong>keys()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a.keys():<br>	<span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">" "</span>)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  name age </p>
<p>3、遍历字典 a 所有的<strong>值</strong> <strong>values()</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a.values():<br>	<span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">" "</span>)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  xiaoming 18</p>
<p>4、返回字典 a 中 的所有<strong>键对值</strong> <strong>items()</strong>  可迭代</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br>b = a.items()<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  dict_items([(‘name’, ‘xiaoming’), (‘age’, 18)])</p>
<p>5、遍历所有键对值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = {<br>    <span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaoming"</span>,<br>    <span class="hljs-string">"age"</span> :<span class="hljs-number">18</span><br>}<br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> a.items():<br>	<span class="hljs-built_in">print</span>(i,<span class="hljs-string">":"</span>,j,end=<span class="hljs-string">" "</span>)<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  name : xiaoming age : 18 </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之文件操作</title>
    <url>/2022/05/22/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、访问模式说明"><a href="#一、访问模式说明" class="headerlink" title="一、访问模式说明"></a>一、访问模式说明</h3><table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>w</td>
<td>用与打开文件和写入，文件存在则覆盖，不存在则创建</td>
</tr>
<tr>
<td>a</td>
<td>用于追加，文件存在则把文字追加到后面，没有则创建，再写入</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。文件已存在则覆盖。文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。文件已存在，新的内容将会被写入到已有内容之后。文件不存在，则创建再写入</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写，如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果改文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。文件存在则覆盖。改文件不存在，则新建文件。</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果改文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<h3 id="二、打开的读写操作"><a href="#二、打开的读写操作" class="headerlink" title="二、打开的读写操作"></a>二、打开的读写操作</h3><p>open(path,mode,encoding,newline)</p>
<table>
<thead>
<tr>
<th>主要参数</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>path</td>
<td>是</td>
<td>文件路径</td>
</tr>
<tr>
<td>mode</td>
<td>是</td>
<td>打开模式</td>
</tr>
<tr>
<td>encoding</td>
<td>否，默认None</td>
<td>编码格式</td>
</tr>
<tr>
<td>newline</td>
<td>否</td>
<td>newline=”” 默认为换行</td>
</tr>
</tbody></table>
<p>1、打开1.txt 文件 和 关闭文件(close())</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">open</span>(<span class="hljs-string">"1.txt"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf8"</span>)<br>a.close()<br></code></pre></td></tr></tbody></table></figure>

<p>2、用with 打开文件，with 会自动关闭文件。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"1.txt"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf8"</span>) <span class="hljs-keyword">as</span> F:<br>    F.write(<span class="hljs-string">""</span>)<br></code></pre></td></tr></tbody></table></figure>

<p>3、创建一个 demo.txt 文件并写入 “好好学习，”</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo.txt"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf8"</span>) <span class="hljs-keyword">as</span> F:<br>    F.write(<span class="hljs-string">"好好学习，"</span>)<br></code></pre></td></tr></tbody></table></figure>

<p>4、打开demo.txt 文件 并把 “ 天天向上 “ 追加到文件末尾</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo.txt"</span>,<span class="hljs-string">"a"</span>,encoding=<span class="hljs-string">"utf8"</span>) <span class="hljs-keyword">as</span> F:<br>    F.write(<span class="hljs-string">"天天向上"</span>)<br></code></pre></td></tr></tbody></table></figure>

<p>5、读取 demo.txt 文件的所有内容</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo.txt"</span>,<span class="hljs-string">"r"</span>,encoding=<span class="hljs-string">"utf8"</span>) <span class="hljs-keyword">as</span> F:<br>    <span class="hljs-built_in">print</span>(F.read())<br></code></pre></td></tr></tbody></table></figure>

<p> <strong>&gt;&gt;&gt;</strong>  好好学习，天天向上</p>
<p>6、按行读取  三字经.txt 文件内容( readline )</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"三字经.txt"</span>, <span class="hljs-string">"r"</span>, encoding=<span class="hljs-string">"utf8"</span>) <span class="hljs-keyword">as</span> F:<br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">118</span>:<br>        <span class="hljs-built_in">print</span>(F.readline())<br>        i+=<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure>

<p>7、读取三字经所有内容并返回 列表 (readlines 返回一个列表) 并遍历打印</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"三字经.txt"</span>, <span class="hljs-string">"r"</span>, encoding=<span class="hljs-string">"utf8"</span>) <span class="hljs-keyword">as</span> F:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> F.readlines():<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></tbody></table></figure>

<h3 id="三、指定位置插入文本"><a href="#三、指定位置插入文本" class="headerlink" title="三、指定位置插入文本"></a>三、指定位置插入文本</h3><p>seek(offset,whence) 方法</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>offset</td>
<td>将光标向前移动n个位置</td>
</tr>
<tr>
<td>whence</td>
<td>参考位置，一般参数为 0,1,2</td>
</tr>
</tbody></table>
<p><strong>–&gt;</strong>  0 ：将开头作为参考位置</p>
<p><strong>–&gt;</strong>  1：将当前作为参考位置</p>
<p><strong>–&gt;</strong>  2：将末尾作为参考位置</p>
<p>1、在 demo.txt 文件开头写入 “我们要做”</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo.txt"</span>,<span class="hljs-string">"r+"</span>) <span class="hljs-keyword">as</span> F:<br>    con = F.read()  <span class="hljs-comment">#记录之前的内容</span><br>    F.seek(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>    F.write(<span class="hljs-string">"我们要做到"</span>+con)<br></code></pre></td></tr></tbody></table></figure>

<h3 id="四、CSV-文件操作"><a href="#四、CSV-文件操作" class="headerlink" title="四、CSV 文件操作"></a>四、CSV 文件操作</h3><p>方法：</p>
<p>writer() 返回一个writer 对像 并提供一个writerow 方法 将内容按行写入到文件中</p>
<p>reader() 返回一个生成器 通过遍历生成器 进而取出所有内容</p>
<p>1、将三字经.txt 写入到 deom.csv 文件中</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"三字经.txt"</span>, <span class="hljs-string">"r"</span>, encoding=<span class="hljs-string">"utf8"</span>) <span class="hljs-keyword">as</span> F:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo.csv"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf8"</span>,newline=<span class="hljs-string">""</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-comment">#创建一个文件对象</span><br>        f_csv = csv.writer(f)  <span class="hljs-comment">#创建一个csv写入对象</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> F.readlines():<br>            f_csv.writerow(i)  <br><br></code></pre></td></tr></tbody></table></figure>

<p>2、读取 demo.csv 文件的所有内容</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo.csv"</span>,<span class="hljs-string">"r"</span>,encoding=<span class="hljs-string">"utf8"</span>,newline=<span class="hljs-string">""</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-comment">#创建一个文件对象</span><br>    f_csv = csv.reader(f)  <span class="hljs-comment">#返回一个可遍历对象</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f_csv:<br>        <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></tbody></table></figure>

<h3 id="五、JSON文件操作"><a href="#五、JSON文件操作" class="headerlink" title="五、JSON文件操作"></a>五、JSON文件操作</h3><p>json 常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>json.dump</td>
<td>将Python对象编码存入.json文件中</td>
</tr>
<tr>
<td>json.load</td>
<td>将.josn文件解析成Python对象</td>
</tr>
<tr>
<td>json.dumps</td>
<td>将Python 对象编码为json字符串</td>
</tr>
<tr>
<td>json.loads</td>
<td>将json已编码字符串解析为Python 对象</td>
</tr>
</tbody></table>
<p>1、将一个字典编码成json 字符串</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-built_in">dict</span> = {<br>    <span class="hljs-string">"a"</span>:<span class="hljs-number">123</span>,<br>    <span class="hljs-string">"b"</span>:<span class="hljs-number">567</span><br>}<br>json_dump = json.dumps(<span class="hljs-built_in">dict</span>) <span class="hljs-comment">#对一个字典对象进行json编码成json字符串</span><br><span class="hljs-built_in">print</span>(json_dump)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(json_dump))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  {“a”: 123, “b”: 567}<br><strong>&gt;&gt;&gt;</strong>  &lt;class ‘str’&gt;</p>
<p>2、将一个已编码的json 字符串解码为Python 对象</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-built_in">dict</span> = {<br>    <span class="hljs-string">"a"</span>:<span class="hljs-number">123</span>,<br>    <span class="hljs-string">"b"</span>:<span class="hljs-number">567</span><br>}<br>json_dump = json.dumps(<span class="hljs-built_in">dict</span>)   <br>json_load = json.loads(json_dump) <span class="hljs-comment">#对一个已编码的json 字符串解码成Python对象</span><br><span class="hljs-built_in">print</span>(json_load)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(json_load))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  {‘a’: 123, ‘b’: 567}<br><strong>&gt;&gt;&gt;</strong>  &lt;class ‘dict’&gt;</p>
<p>3、将Python对象编码存入demo1.json文件中</p>
<p>方法：</p>
<p>dump(obj,file)  obj : 字典对象   file 文件对象</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-built_in">dict</span> = {<br>    <span class="hljs-string">"a"</span>:<span class="hljs-number">123</span>,<br>    <span class="hljs-string">"b"</span>:<span class="hljs-number">567</span><br>}<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo1.json"</span>,<span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> F: <span class="hljs-comment">#创建一个文件对象</span><br>    json_dump = json.dump(<span class="hljs-built_in">dict</span>,F)<br><br></code></pre></td></tr></tbody></table></figure>

<p>4、将 demo1.josn文件解析成Python对象并输出</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"demo1.json"</span>,<span class="hljs-string">"r"</span>) <span class="hljs-keyword">as</span> F:<br>    json_load = json.load(F)<br>    <span class="hljs-built_in">print</span>(json_load)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(json_load))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  {‘a’: 123, ‘b’: 567}<br><strong>&gt;&gt;&gt;</strong>  &lt;class ‘dict’&gt;</p>
<p>5、</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python基础之编码与进制</title>
    <url>/2022/06/28/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BC%96%E7%A0%81%E4%B8%8E%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<br>

<span id="more"></span>

<h3 id="一、Ascii-码转换-ord"><a href="#一、Ascii-码转换-ord" class="headerlink" title="一、Ascii 码转换   ord()"></a>一、Ascii 码转换   ord()</h3><p>将字符 a 转换为 Ascii码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"a"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(a))<br></code></pre></td></tr></tbody></table></figure>

<p> <strong>&gt;&gt;&gt;</strong>  97</p>
<h3 id="二、Ascii-码转换为普通字符-chr"><a href="#二、Ascii-码转换为普通字符-chr" class="headerlink" title="二、Ascii 码转换为普通字符 chr()"></a>二、Ascii 码转换为普通字符 chr()</h3><p>将 ascii 码 97 转换为普通字符</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">97</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  a</p>
<h3 id="三、进制转换"><a href="#三、进制转换" class="headerlink" title="三、进制转换"></a>三、进制转换</h3><h4 id="1、二-进制转换为其他进制"><a href="#1、二-进制转换为其他进制" class="headerlink" title="1、二 进制转换为其他进制"></a>1、二 进制转换为其他进制</h4><p>2  进制转  8  进制  oct(int(n,2))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">2</span>)))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0o12</p>
<p>2  进制转 10 进制  int(n,2)</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">2</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  10</p>
<p>2  进制转 16 进制  hex(int(n,2))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">2</span>)))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0xa</p>
<h4 id="2、八进制转换为其他进制"><a href="#2、八进制转换为其他进制" class="headerlink" title="2、八进制转换为其他进制"></a>2、八进制转换为其他进制</h4><p>8 进制转 2 进制  bin(int(n,8))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">8</span>)))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0b1000001000</p>
<p>8 进制转 10 进制  int(n,8)</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">8</span>))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  520</p>
<p>8 进制转 16 进制  hex(int(n,8))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">8</span>)))<br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0x208</p>
<h4 id="3、十进制转换为其他进制"><a href="#3、十进制转换为其他进制" class="headerlink" title="3、十进制转换为其他进制"></a>3、十进制转换为其他进制</h4><p>10 进制转 2 进制  bin(int(n,10))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">10</span>)))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0b1111110010</p>
<p>10 进制转 8进制  oct(int(n,10))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">10</span>)))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0o1762</p>
<p>10 进制转  16 进制 hex(int(n,10))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">10</span>)))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0x3f2</p>
<h4 id="4、十六进制转换为其他进制"><a href="#4、十六进制转换为其他进制" class="headerlink" title="4、十六进制转换为其他进制"></a>4、十六进制转换为其他进制</h4><p>16 进制转 2 进制  bin(int(n,16))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">16</span>)))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0b1000000010000</p>
<p>16 进制转  8 进制  oct(int(n,16))</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">"1010"</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">16</span>)))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  0o10020</p>
<p>16 进制转  10  进制 int(n,16)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs plaintext">n = "1010"<br>print(int(n,16))<br><br></code></pre></td></tr></tbody></table></figure>

<p><strong>&gt;&gt;&gt;</strong>  4112</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>进制转换</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/2022/07/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="21341e0e8dc6d97c38c5ca17c76d3e109daf0addd9fe105605ecb14af8ebdeef"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">努力学习</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>web安全</category>
        <category>文件上传漏洞</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
</search>
